/**
 * 路由配置，本文件由代码生成，请勿修改 
 * @file route.js
 */
import {DemoItem} from './DemoItem';
import {ShapeTest as Component1} from '../test/button';
import {SizeTest as Component2} from '../test/button';
import {TypeTest as Component3} from '../test/button';
import {VariantTest as Component4} from '../test/button';
import {LoadingTest as Component5} from '../test/button';
import {DebounceThrottleTest as Component6} from '../test/button';
import {BaseTest as Component7} from '../test/checkbox';
import {ConfigTest as Component8} from '../test/checkbox';
import {FCheckboxControlledTest as Component9} from '../test/checkbox';
import {GroupTest as Component10} from '../test/checkbox';
import {CheckboxTest as Component11} from '../test/checkbox';
import {MaxTest as Component12} from '../test/checkbox';
import {FDialogTest as Component13} from '../test/dialog';
import {HeaderTest as Component14} from '../test/dialog';
import {FooterTest as Component15} from '../test/dialog';
import {ApiTest as Component16} from '../test/dialog';
import {QuickConvenientTest as Component17} from '../test/dialog';
import {FDrawerTest as Component18} from '../test/drawer';
import {IconTest as Component19} from '../test/icon';
import {DefaultTest as Component20} from '../test/layout';
import {ASideTest as Component21} from '../test/layout';
import {DivTest as Component22} from '../test/layout';
import {Test1 as Component23} from '../test/layout';
import {Test2 as Component24} from '../test/layout';
import {Test3 as Component25} from '../test/layout';
import {SpeedTest as Component26} from '../test/loading';
import {DurationTest as Component27} from '../test/loading';
import {ColorTest as Component28} from '../test/loading';
import {FMenuTest as Component29} from '../test/menu';
import {GroupTest as Component30} from '../test/menu';
import {FMenuIconTest as Component31} from '../test/menu';
import {CollapseTest as Component32} from '../test/menu';
import {Test as Component33} from '../test/pagination';
import {FProgressTest as Component34} from '../test/progress';
import {ThemeTest as Component35} from '../test/progress';
import {Test2 as Component36} from '../test/progress';
import {Test3 as Component37} from '../test/progress';
import {BaseTest as Component38} from '../test/radio';
import {ConfigTest as Component39} from '../test/radio';
import {ButtonTest as Component40} from '../test/radio';
import {GroupTest as Component41} from '../test/radio';
import {SizeTest as Component42} from '../test/radio';
import {BaseTest as Component43} from '../test/siwtch';
import {ColorTest as Component44} from '../test/siwtch';
import {WidthTest as Component45} from '../test/siwtch';
import {TextTest as Component46} from '../test/siwtch';
import {ValueTest as Component47} from '../test/siwtch';
import {DisabledTest as Component48} from '../test/siwtch';
import {BeforeChangeTest as Component49} from '../test/siwtch';
import {LoadingTest as Component50} from '../test/siwtch';
import {FTabTest1 as Component51} from '../test/tab';
import {FTabTest2 as Component52} from '../test/tab';
import {FTableTest1 as Component53} from '../test/table';
import {FTableTest2 as Component54} from '../test/table';
import {FTableTest3 as Component55} from '../test/table';
import {FTableTest4 as Component56} from '../test/table';
import {FTableTest5 as Component57} from '../test/table';
import {FTagTest as Component58} from '../test/tag';
import {FToastTest as Component59} from '../test/toast';
import {CloseTest as Component60} from '../test/toast';
import {ApiTest as Component61} from '../test/toast';
import {QuickTest as Component62} from '../test/toast'
export const routes = [{label: '按钮（FButton）', path: '/button', element: <><h1>按钮（FButton）</h1><div><DemoItem title="不同形状" value="export const ShapeTest = function () {\r\n  return (\r\n    &amp;lt;&amp;gt;\r\n      &amp;lt;div style={{ display: &amp;#39;flex&amp;#39;, flexWrap: &amp;#39;wrap&amp;#39;, gap: 10 }}&amp;gt;\r\n        {[&amp;#39;round&amp;#39;, &amp;#39;square&amp;#39;, &amp;#39;rectangle&amp;#39;, &amp;#39;circle&amp;#39;].map(shape =&amp;gt; (\r\n          &amp;lt;FButton key={shape} shape={shape as ButtonShape}&amp;gt;{shape}&amp;lt;/FButton&amp;gt;\r\n        ))}\r\n      &amp;lt;/div&amp;gt;\r\n    &amp;lt;/&amp;gt;\r\n  )\r\n}" view={<Component1/>}/><br/><DemoItem title="不同尺寸" value="export const SizeTest = function () {\r\n  return (\r\n    &amp;lt;&amp;gt;\r\n      &amp;lt;div style={{ display: &amp;#39;flex&amp;#39;, flexWrap: &amp;#39;wrap&amp;#39;, gap: 10 }}&amp;gt;\r\n        {[&amp;#39;small&amp;#39;, &amp;#39;medium&amp;#39;, &amp;#39;large&amp;#39;].map(size =&amp;gt; (\r\n          &amp;lt;FButton key={size} size={size as ButtonSize}&amp;gt;{size}&amp;lt;/FButton&amp;gt;\r\n        ))}\r\n      &amp;lt;/div&amp;gt;\r\n    &amp;lt;/&amp;gt;\r\n  )\r\n}" view={<Component2/>}/><br/><DemoItem title="不同类型" value="export const TypeTest = function () {\r\n  return (\r\n    &amp;lt;&amp;gt;\r\n      &amp;lt;div style={{ display: &amp;#39;flex&amp;#39;, flexWrap: &amp;#39;wrap&amp;#39;, gap: 10 }}&amp;gt;\r\n        {[&amp;#39;default&amp;#39;, &amp;#39;primary&amp;#39;, &amp;#39;danger&amp;#39;, &amp;#39;safe&amp;#39;, &amp;#39;warn&amp;#39;].map(type =&amp;gt; (\r\n          &amp;lt;FButton key={type} type={type as InteractionType}&amp;gt;{type}&amp;lt;/FButton&amp;gt;\r\n        ))}\r\n      &amp;lt;/div&amp;gt;\r\n    &amp;lt;/&amp;gt;\r\n  )\r\n}" view={<Component3/>}/><br/><DemoItem title="不同形态" value="export const VariantTest = function () {\r\n  return (\r\n    &amp;lt;&amp;gt;\r\n      &amp;lt;div style={{ display: &amp;#39;flex&amp;#39;, flexWrap: &amp;#39;wrap&amp;#39;, gap: 10 }}&amp;gt;\r\n        {[&amp;#39;base&amp;#39;, &amp;#39;outline&amp;#39;, &amp;#39;dashed&amp;#39;, &amp;#39;text&amp;#39;].map(variant =&amp;gt; (\r\n          &amp;lt;FButton key={variant} variant={variant as Variant}&amp;gt;{variant}&amp;lt;/FButton&amp;gt;\r\n        ))}\r\n      &amp;lt;/div&amp;gt;\r\n    &amp;lt;/&amp;gt;\r\n  )\r\n}" view={<Component4/>}/><br/><DemoItem title="加载中" value="export const LoadingTest = function () {\r\n  const [isLoading1, setLoading1] = useState(false)\r\n  const [isLoading2, setLoading2] = useState(false)\r\n  const [isLoading3, setLoading3] = useState(false)\r\n  const onClick = (setLoading: ActionFn) =&amp;gt; {\r\n    setLoading(true)\r\n    setTimeout(() =&amp;gt; {\r\n      setLoading(false)\r\n    }, 4000);\r\n  }\r\n  return (&amp;lt;&amp;gt;\r\n    {(&amp;lt;div style={{ display: &amp;#39;flex&amp;#39;, flexWrap: &amp;#39;wrap&amp;#39;, gap: 10 }}&amp;gt;\r\n      &amp;lt;FButton loading={isLoading1} onClick={onClick.bind(null, setLoading1)} type=&amp;#39;default&amp;#39;&amp;gt;点我加载&amp;lt;/FButton&amp;gt;\r\n      &amp;lt;FButton loading={isLoading2} onClick={onClick.bind(null, setLoading2)} type=&amp;#39;primary&amp;#39;&amp;gt;点我加载&amp;lt;/FButton&amp;gt;\r\n      &amp;lt;FButton loading={isLoading3} onClick={onClick.bind(null, setLoading3)} type=&amp;#39;warn&amp;#39; variant=&amp;quot;text&amp;quot;&amp;gt;点我加载&amp;lt;/FButton&amp;gt;\r\n    &amp;lt;/div&amp;gt;)}\r\n  &amp;lt;/&amp;gt;)\r\n}" view={<Component5/>}/><br/><DemoItem title="防抖节流" value="export const DebounceThrottleTest = function () {\r\n  const [num1, setNum1] = useState(n1)\r\n  const [num2, setNum2] = useState(n2)\r\n  const [num3, setNum3] = useState(n3)\r\n  const onClick1 = () =&amp;gt; setNum1(++n1)\r\n  const onClick2 = () =&amp;gt; setNum2(++n2)\r\n  const onClick3 = () =&amp;gt; setNum3(++n3)\r\n  return (&amp;lt;&amp;gt;\r\n    &amp;lt;div&amp;gt;疯狂点击下面按钮试试&amp;lt;/div&amp;gt;\r\n    &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;\r\n    {(&amp;lt;div style={{ display: &amp;#39;flex&amp;#39;, flexWrap: &amp;#39;wrap&amp;#39;, gap: 10 }}&amp;gt;\r\n      &amp;lt;FButton onClick={onClick1} type=&amp;#39;danger&amp;#39; variant=&amp;quot;dashed&amp;quot;&amp;gt;{num1}+1&amp;lt;/FButton&amp;gt;\r\n      &amp;lt;FButton debounce={500} onClick={onClick2} type=&amp;#39;primary&amp;#39; variant=&amp;quot;dashed&amp;quot;&amp;gt;{num2}+1（防抖）&amp;lt;/FButton&amp;gt;\r\n      &amp;lt;FButton throttle={500} onClick={onClick3} type=&amp;#39;safe&amp;#39; variant=&amp;quot;dashed&amp;quot;&amp;gt;{num3}+1（节流）&amp;lt;/FButton&amp;gt;\r\n    &amp;lt;/div&amp;gt;)}\r\n  &amp;lt;/&amp;gt;)\r\n}" view={<Component6/>}/></div></>},{label: '复选框（FCheckbox）', path: '/checkbox', element: <><h1>复选框（FCheckbox）</h1><div><DemoItem title="基础复选框" value="export const BaseTest = function () {\r\n    return (\r\n        &amp;lt;div style={{ display: &amp;quot;flex&amp;quot;, width: &amp;#39;800px&amp;#39;, height: &amp;#39;30px&amp;#39;, backgroundColor: &amp;#39;#fff&amp;#39;, padding: &amp;#39;10px&amp;#39;, alignItems: &amp;#39;center&amp;#39;, gap: &amp;#39;20px&amp;#39; }}&amp;gt;\r\n            &amp;lt;FCheckbox label=&amp;quot;选中&amp;quot; checked /&amp;gt;\r\n            &amp;lt;FCheckbox label=&amp;quot;半选中&amp;quot; indeterminate /&amp;gt;\r\n            &amp;lt;FCheckbox label=&amp;quot;未选中&amp;quot; /&amp;gt;\r\n            &amp;lt;FCheckbox label=&amp;quot;选中-禁用&amp;quot; checked disabled /&amp;gt;\r\n            &amp;lt;FCheckbox label=&amp;quot;半选中-禁用&amp;quot; indeterminate disabled /&amp;gt;\r\n            &amp;lt;FCheckbox label=&amp;quot;未选中-禁用&amp;quot; disabled /&amp;gt;\r\n        &amp;lt;/div&amp;gt;\r\n    )\r\n}" view={<Component7/>}/><br/><DemoItem title="基础配置" value="export const ConfigTest = function () {\r\n\r\n    const [indeterminate, setIndeterminate] = useState&amp;lt;boolean&amp;gt;(false)\r\n    const [checked, setChecked] = useState&amp;lt;boolean&amp;gt;(false)\r\n    const [disabled, setDisabled] = useState&amp;lt;boolean&amp;gt;(false)\r\n    const [readonly, setReadonly] = useState&amp;lt;boolean&amp;gt;(false)\r\n\r\n\r\n    return (\r\n        &amp;lt;div style={{ display: &amp;quot;flex&amp;quot;, width: &amp;#39;800px&amp;#39;, height: &amp;#39;120px&amp;#39;, backgroundColor: &amp;#39;#fff&amp;#39;, padding: &amp;#39;10px&amp;#39; }}&amp;gt;\r\n            &amp;lt;div className=&amp;quot;left&amp;quot; style={{ width: &amp;quot;70%&amp;quot;, margin: &amp;quot;auto&amp;quot;, paddingLeft: &amp;#39;100px&amp;#39; }}&amp;gt;\r\n                &amp;lt;FCheckbox indeterminate={indeterminate} checked={checked} disabled={disabled} readonly={readonly}&amp;gt;复选框&amp;lt;/FCheckbox&amp;gt;\r\n            &amp;lt;/div&amp;gt;\r\n            &amp;lt;div className=&amp;quot;right&amp;quot; style={{ width: &amp;quot;30%&amp;quot; }}&amp;gt;\r\n                &amp;lt;div className=&amp;quot;item&amp;quot; style={{ display: &amp;quot;flex&amp;quot;, alignItems: &amp;quot;center&amp;quot;, justifyContent: &amp;quot;div-between&amp;quot;, height: &amp;quot;30px&amp;quot; }}&amp;gt;\r\n                    &amp;lt;span&amp;gt;indeterminate&amp;lt;/span&amp;gt;\r\n                    &amp;lt;FSwitch onChange={(v) =&amp;gt; setIndeterminate(v as boolean)} size=&amp;#39;small&amp;#39; value={indeterminate}&amp;gt;&amp;lt;/FSwitch&amp;gt;\r\n                &amp;lt;/div&amp;gt;\r\n                &amp;lt;div className=&amp;quot;item&amp;quot; style={{ display: &amp;quot;flex&amp;quot;, alignItems: &amp;quot;center&amp;quot;, justifyContent: &amp;quot;div-between&amp;quot;, height: &amp;quot;30px&amp;quot; }}&amp;gt;\r\n                    &amp;lt;span&amp;gt;checked&amp;lt;/span&amp;gt;\r\n                    &amp;lt;FSwitch onChange={(v) =&amp;gt; setChecked(v as boolean)} size=&amp;#39;small&amp;#39; value={checked}&amp;gt;&amp;lt;/FSwitch&amp;gt;\r\n                &amp;lt;/div&amp;gt;\r\n                &amp;lt;div className=&amp;quot;item&amp;quot; style={{ display: &amp;quot;flex&amp;quot;, alignItems: &amp;quot;center&amp;quot;, justifyContent: &amp;quot;div-between&amp;quot;, height: &amp;quot;30px&amp;quot; }}&amp;gt;\r\n                    &amp;lt;span&amp;gt;disabled&amp;lt;/span&amp;gt;\r\n                    &amp;lt;FSwitch onChange={(v) =&amp;gt; setDisabled(v as boolean)} size=&amp;#39;small&amp;#39; value={disabled}&amp;gt;&amp;lt;/FSwitch&amp;gt;\r\n                &amp;lt;/div&amp;gt;\r\n                &amp;lt;div className=&amp;quot;item&amp;quot; style={{ display: &amp;quot;flex&amp;quot;, alignItems: &amp;quot;center&amp;quot;, justifyContent: &amp;quot;div-between&amp;quot;, height: &amp;quot;30px&amp;quot; }}&amp;gt;\r\n                    &amp;lt;span&amp;gt;readonly&amp;lt;/span&amp;gt;\r\n                    &amp;lt;FSwitch onChange={(v) =&amp;gt; setReadonly(v as boolean)} size=&amp;#39;small&amp;#39; value={readonly}&amp;gt;&amp;lt;/FSwitch&amp;gt;\r\n                &amp;lt;/div&amp;gt;\r\n            &amp;lt;/div&amp;gt;\r\n        &amp;lt;/div&amp;gt;\r\n    )\r\n}" view={<Component8/>}/><br/><DemoItem title="联动多选框" value="export const FCheckboxControlledTest = function () {\r\n    const [checked, setChecked] = useState(false);\r\n    return (\r\n        &amp;lt;div style={{ width: &amp;#39;800px&amp;#39;, height: &amp;#39;70px&amp;#39;, backgroundColor: &amp;#39;#fff&amp;#39;, padding: &amp;#39;10px&amp;#39; }}&amp;gt;\r\n            &amp;lt;div style={{ display: &amp;#39;flex&amp;#39;, gap: &amp;#39;20px&amp;#39;, marginBottom: &amp;#39;20px&amp;#39; }}&amp;gt;\r\n                &amp;lt;FCheckbox checked={checked}&amp;gt;腾讯云A&amp;lt;/FCheckbox&amp;gt;\r\n                &amp;lt;FCheckbox checked={checked}&amp;gt;腾讯云B&amp;lt;/FCheckbox&amp;gt;\r\n                &amp;lt;FCheckbox checked={checked}&amp;gt;腾讯云C&amp;lt;/FCheckbox&amp;gt;\r\n            &amp;lt;/div&amp;gt;\r\n\r\n            &amp;lt;div style={{ display: &amp;#39;flex&amp;#39; }}&amp;gt;\r\n                &amp;lt;FButton onClick={() =&amp;gt; setChecked(false)}&amp;gt;重置&amp;lt;/FButton&amp;gt;\r\n                &amp;lt;FButton type=&amp;quot;primary&amp;quot; style={{ marginLeft: 16 }} onClick={() =&amp;gt; setChecked(true)}&amp;gt;\r\n                    全选\r\n                &amp;lt;/FButton&amp;gt;\r\n            &amp;lt;/div&amp;gt;\r\n        &amp;lt;/div&amp;gt;\r\n    );\r\n}" view={<Component9/>}/><br/><DemoItem title="成组的多选框组" value="export const GroupTest = function () {\r\n    const options1 = [{ label: &amp;#39;选项1&amp;#39;, value: 1, disabled: true }, { label: &amp;#39;选项2&amp;#39;, value: 2, readonly: true }, { label: &amp;#39;选项3&amp;#39;, value: 3 }, { label: &amp;#39;选项4&amp;#39;, value: 4 }]\r\n    const [value2, setValue2] = useState&amp;lt;CheckboxValue[]&amp;gt;([])\r\n    function handleChange(v: CheckboxValue[], c: {}) {\r\n        setValue2(v)\r\n    }\r\n\r\n    const options2 = [{ label: &amp;#39;广州&amp;#39;, value: &amp;#39;广州&amp;#39; }, { label: &amp;#39;深圳&amp;#39;, value: &amp;#39;深圳&amp;#39; }, { label: &amp;#39;上海&amp;#39;, value: &amp;#39;上海&amp;#39; }, { label: &amp;#39;北京&amp;#39;, value: &amp;#39;北京&amp;#39; }, { label: &amp;#39;全选&amp;#39;, value: &amp;#39;&amp;#39;, checkAll: true }]\r\n    const [value3, setValue3] = useState&amp;lt;CheckboxValue[]&amp;gt;([])\r\n\r\n    return &amp;lt;div style={{ width: &amp;#39;800px&amp;#39;, height: &amp;#39;120px&amp;#39;, backgroundColor: &amp;#39;#fff&amp;#39;, padding: &amp;#39;10px&amp;#39;, alignItems: &amp;#39;center&amp;#39; }}&amp;gt;\r\n        &amp;lt;FCheckbox.Group options={options1} value={value2} onChange={(v, c) =&amp;gt; handleChange(v, c)} /&amp;gt; &amp;lt;br /&amp;gt;\r\n\r\n        &amp;lt;div&amp;gt;选中的值有：{value3.join(&amp;#39;,&amp;#39;)}&amp;lt;/div&amp;gt;&amp;lt;br /&amp;gt;\r\n        &amp;lt;FCheckbox.Group options={options2} value={value3} onChange={(v) =&amp;gt; setValue3(v)} /&amp;gt; &amp;lt;br /&amp;gt;\r\n    &amp;lt;/div&amp;gt;\r\n}" view={<Component10/>}/><br/><DemoItem title="受控与非受控多选框" value="export const CheckboxTest = function () {\r\n    const [value, setValue] = useState(false);\r\n\r\n    return (\r\n        &amp;lt;div style={{ display: &amp;quot;flex&amp;quot;, width: &amp;#39;800px&amp;#39;, height: &amp;#39;50px&amp;#39;, backgroundColor: &amp;#39;#fff&amp;#39;, gap: &amp;#39;20px&amp;#39;, alignItems: &amp;#39;center&amp;#39;, padding: &amp;#39;10px&amp;#39; }}&amp;gt;\r\n            &amp;lt;FCheckbox checked={value} onChange={(v) =&amp;gt; setValue(v === &amp;#39;checked&amp;#39; ? true : false)}&amp;gt;\r\n                受控属性\r\n            &amp;lt;/FCheckbox&amp;gt;\r\n            &amp;lt;FCheckbox defaultChecked={true}&amp;gt;非受控属性&amp;lt;/FCheckbox&amp;gt;\r\n        &amp;lt;/div&amp;gt;\r\n    );\r\n}" view={<Component11/>}/><br/><DemoItem title="最多可选" value="export const MaxTest = function () {\r\n    const options = [{ label: &amp;#39;选项1&amp;#39;, value: 1 }, { label: &amp;#39;选项2&amp;#39;, value: 2 }, { label: &amp;#39;选项3&amp;#39;, value: 3 }, { label: &amp;#39;选项4&amp;#39;, value: 4 }]\r\n    const [value1, setValue1] = useState&amp;lt;CheckboxValue[]&amp;gt;([])\r\n    const [count, setCount] = useState(1)\r\n\r\n    function add() {\r\n        console.log(count);\r\n        setCount(count + 1)\r\n    }\r\n    function subtract() {\r\n        console.log(count);\r\n        if (count &amp;gt; 1) {\r\n            setCount(count - 1)\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        &amp;lt;div style={{ width: &amp;#39;800px&amp;#39;, height: &amp;#39;100px&amp;#39;, backgroundColor: &amp;#39;#fff&amp;#39;, padding: &amp;#39;10px&amp;#39; }}&amp;gt;\r\n            &amp;lt;div style={{ display: &amp;quot;flex&amp;quot;, gap: &amp;quot;20px&amp;quot;, marginBottom: &amp;#39;20px&amp;#39; }}&amp;gt;\r\n                {`最多可选：${count}`}\r\n                &amp;lt;FButton type=&amp;quot;primary&amp;quot; onClick={add}&amp;gt;增加&amp;lt;/FButton&amp;gt;\r\n                &amp;lt;FButton type=&amp;quot;primary&amp;quot; onClick={subtract}&amp;gt;减少&amp;lt;/FButton&amp;gt;\r\n            &amp;lt;/div&amp;gt;\r\n            &amp;lt;FCheckbox.Group max={count} options={options} value={value1} onChange={(v) =&amp;gt; setValue1(v)} /&amp;gt; &amp;lt;br /&amp;gt;\r\n        &amp;lt;/div&amp;gt;\r\n    );\r\n}" view={<Component12/>}/></div></>},{label: '对话框（FDialog）', path: '/dialog', element: <><h1>对话框（FDialog）</h1><div><DemoItem title="基础使用" value="export const FDialogTest = function () {\r\n  const [visible, setVisible] = useState(false)\r\n  return (&amp;lt;div&amp;gt;\r\n    &amp;lt;FButton variant=&amp;quot;outline&amp;quot; type=&amp;quot;primary&amp;quot; onClick={() =&amp;gt; {\r\n      setVisible(true)\r\n    }}&amp;gt;点我&amp;lt;/FButton&amp;gt;\r\n    &amp;lt;FDialog\r\n      onConfirm={() =&amp;gt; {\r\n        toast.success(&amp;#39;确定&amp;#39;)\r\n        setVisible(false)\r\n      }}\r\n      onCancel={() =&amp;gt; {\r\n        toast.fail(&amp;#39;取消&amp;#39;)\r\n        setVisible(false)\r\n      }}\r\n      onClose={() =&amp;gt; {\r\n        toast(&amp;#39;点击关闭按钮&amp;#39;)\r\n        setVisible(false)\r\n      }}\r\n      onClickModal={() =&amp;gt; {\r\n        toast(&amp;#39;点击遮罩&amp;#39;)\r\n        setVisible(false)\r\n      }}\r\n      title=&amp;quot;这是标题&amp;quot;\r\n      visible={visible}\r\n      content=&amp;quot;这是内容&amp;quot;&amp;gt;\r\n    &amp;lt;/FDialog&amp;gt;\r\n  &amp;lt;/div&amp;gt;)\r\n}" view={<Component13/>}/><br/><DemoItem title="自定义头部" value="export const HeaderTest = function () {\r\n  const [visible, setVisible] = useState(false)\r\n  return (&amp;lt;div&amp;gt;\r\n    &amp;lt;FButton variant=&amp;quot;outline&amp;quot; type=&amp;quot;primary&amp;quot; onClick={() =&amp;gt; {\r\n      setVisible(true)\r\n    }}&amp;gt;点我&amp;lt;/FButton&amp;gt;\r\n    &amp;lt;FDialog\r\n      onClickModal={() =&amp;gt; {\r\n        setVisible(false)\r\n      }}\r\n      header={\r\n        &amp;lt;div style={{\r\n          alignItems: &amp;#39;center&amp;#39;,\r\n          display: &amp;#39;flex&amp;#39;,\r\n          width: &amp;quot;100%&amp;quot;,\r\n          height: &amp;#39;40px&amp;#39;,\r\n          justifyContent: &amp;#39;center&amp;#39;,\r\n          fontSize: 20\r\n        }}&amp;gt;\r\n          FEB-UI用户协议\r\n        &amp;lt;/div&amp;gt;\r\n      }\r\n      visible={visible}\r\n      content={(function () {\r\n        let a = new Array(100)\r\n        for (let i = 0; i &amp;lt; a.length; i++) {\r\n          a[i] = &amp;#39;这是内容&amp;#39;\r\n        }\r\n        return a.join(&amp;#39;&amp;#39;)\r\n      })()}&amp;gt;\r\n    &amp;lt;/FDialog&amp;gt;\r\n  &amp;lt;/div&amp;gt;)\r\n}" view={<Component14/>}/><br/><DemoItem title="自定义底部" value="export const FooterTest = function () {\r\n  const [visible, setVisible] = useState(false)\r\n  const select = (ans: string) =&amp;gt; {\r\n    if (ans === &amp;#39;A&amp;#39;) {\r\n      toast.success(&amp;#39;回答正确&amp;#39;)\r\n    } else {\r\n      toast.fail(&amp;#39;回答错误&amp;#39;)\r\n    }\r\n    setVisible(false)\r\n  }\r\n  return (&amp;lt;div&amp;gt;\r\n    &amp;lt;FButton variant=&amp;quot;outline&amp;quot; type=&amp;quot;primary&amp;quot; onClick={() =&amp;gt; {\r\n      setVisible(true)\r\n    }}&amp;gt;点我&amp;lt;/FButton&amp;gt;\r\n    &amp;lt;FDialog\r\n      title=&amp;quot;以下选项中合法的 C 语言赋值语句是：&amp;quot;\r\n      onClickModal={() =&amp;gt; {\r\n        setVisible(false)\r\n      }}\r\n      footer={\r\n        &amp;lt;div style={{\r\n          alignItems: &amp;#39;center&amp;#39;,\r\n          display: &amp;#39;flex&amp;#39;,\r\n          width: &amp;quot;100%&amp;quot;,\r\n          height: &amp;#39;40px&amp;#39;,\r\n        }}&amp;gt;\r\n          请选择答案：\r\n          &amp;lt;FButton onClick={() =&amp;gt; select(&amp;#39;A&amp;#39;)} type=&amp;quot;primary&amp;quot; variant=&amp;quot;text&amp;quot; shape=&amp;quot;circle&amp;quot; &amp;gt;A&amp;lt;/FButton&amp;gt;\r\n          &amp;lt;FButton onClick={() =&amp;gt; select(&amp;#39;B&amp;#39;)} type=&amp;quot;primary&amp;quot; variant=&amp;quot;text&amp;quot; shape=&amp;quot;circle&amp;quot; &amp;gt;B&amp;lt;/FButton&amp;gt;\r\n          &amp;lt;FButton onClick={() =&amp;gt; select(&amp;#39;C&amp;#39;)} type=&amp;quot;primary&amp;quot; variant=&amp;quot;text&amp;quot; shape=&amp;quot;circle&amp;quot; &amp;gt;C&amp;lt;/FButton&amp;gt;\r\n          &amp;lt;FButton onClick={() =&amp;gt; select(&amp;#39;D&amp;#39;)} type=&amp;quot;primary&amp;quot; variant=&amp;quot;text&amp;quot; shape=&amp;quot;circle&amp;quot; &amp;gt;D&amp;lt;/FButton&amp;gt;\r\n        &amp;lt;/div&amp;gt;\r\n      }\r\n      visible={visible}&amp;gt;\r\n      &amp;lt;div style={{ lineHeight: 2 }}&amp;gt;\r\n        &amp;lt;div&amp;gt;A） ++i;&amp;lt;/div&amp;gt;\r\n        &amp;lt;div&amp;gt;B） a=b=34&amp;lt;/div&amp;gt;\r\n        &amp;lt;div&amp;gt;C） a=3,b=9&amp;lt;/div&amp;gt;\r\n        &amp;lt;div&amp;gt;D） k=int(a+b);&amp;lt;/div&amp;gt;\r\n      &amp;lt;/div&amp;gt;\r\n    &amp;lt;/FDialog&amp;gt;\r\n  &amp;lt;/div&amp;gt;)\r\n}" view={<Component15/>}/><br/><DemoItem title="API调用" value="export const ApiTest = function () {\r\n  return (&amp;lt;div style={{display: &amp;#39;flex&amp;#39;, gap: 10, flexWrap: &amp;#39;wrap&amp;#39;}}&amp;gt;\r\n    &amp;lt;FButton variant=&amp;quot;outline&amp;quot; type=&amp;quot;primary&amp;quot; onClick={() =&amp;gt; {\r\n      febDialog({\r\n        title: &amp;#39;这是标题&amp;#39;,\r\n        content: &amp;#39;这是内容&amp;#39;,\r\n      }).then(() =&amp;gt; {\r\n        toast(&amp;#39;点击确定&amp;#39;)\r\n      })\r\n    }}&amp;gt;常规调用&amp;lt;/FButton&amp;gt;\r\n    &amp;lt;FButton variant=&amp;quot;outline&amp;quot; type=&amp;quot;primary&amp;quot; onClick={() =&amp;gt; {\r\n      febDialog({\r\n        title: &amp;#39;这是标题&amp;#39;,\r\n        content: &amp;#39;这是内容&amp;#39;,\r\n        showClose: true\r\n      }).then((res) =&amp;gt; {\r\n        toast(res ? &amp;#39;确定&amp;#39; : &amp;#39;关闭&amp;#39;)\r\n      })\r\n    }}&amp;gt;显示关闭按钮&amp;lt;/FButton&amp;gt;\r\n     &amp;lt;FButton variant=&amp;quot;outline&amp;quot; type=&amp;quot;primary&amp;quot; onClick={() =&amp;gt; {\r\n      febDialog({\r\n        title: &amp;#39;这是标题&amp;#39;,\r\n        content: &amp;#39;这是内容&amp;#39;,\r\n        showCancel: true\r\n      }).then((res) =&amp;gt; {\r\n        toast(res ? &amp;#39;确定&amp;#39; : &amp;#39;取消&amp;#39;)\r\n      })\r\n    }}&amp;gt;显示取消按钮&amp;lt;/FButton&amp;gt;\r\n    &amp;lt;FButton variant=&amp;quot;outline&amp;quot; type=&amp;quot;primary&amp;quot; onClick={() =&amp;gt; {\r\n      febDialog({\r\n        title: &amp;#39;这是标题&amp;#39;,\r\n        content: &amp;#39;这是内容&amp;#39;,\r\n        showCancel: true,\r\n        throwReject: true\r\n      }).then(() =&amp;gt; {\r\n        toast(&amp;#39;点击确定&amp;#39;)\r\n      }).catch(() =&amp;gt; {\r\n        toast.fail(&amp;#39;被拒绝&amp;#39;)\r\n      })\r\n    }}&amp;gt;捕捉拒绝事件&amp;lt;/FButton&amp;gt;\r\n    &amp;lt;FButton variant=&amp;quot;outline&amp;quot; type=&amp;quot;primary&amp;quot; onClick={() =&amp;gt; {\r\n      febDialog({\r\n        title: &amp;#39;这是标题&amp;#39;,\r\n        content: &amp;#39;这是内容&amp;#39;,\r\n        showCancel: true,\r\n        confirmText: &amp;#39;批了&amp;#39;,\r\n        cancelText: &amp;#39;朕不许&amp;#39;\r\n      })\r\n    }}&amp;gt;自定义按钮文字&amp;lt;/FButton&amp;gt;\r\n    &amp;lt;FButton variant=&amp;quot;outline&amp;quot; type=&amp;quot;primary&amp;quot; onClick={() =&amp;gt; {\r\n      febDialog({\r\n        title: &amp;#39;警告&amp;#39;,\r\n        content: &amp;#39;真的要删除这个文件吗？&amp;#39;,\r\n        showCancel: true,\r\n        confirmType: &amp;#39;danger&amp;#39;,\r\n        cancelType: &amp;#39;safe&amp;#39;,\r\n        confirmVariant: &amp;#39;outline&amp;#39;,\r\n      })\r\n    }}&amp;gt;自定义按钮样式&amp;lt;/FButton&amp;gt;\r\n    &amp;lt;FButton variant=&amp;quot;outline&amp;quot; type=&amp;quot;primary&amp;quot; onClick={() =&amp;gt; {\r\n      febDialog({\r\n        title: &amp;#39;新好友提醒&amp;#39;,\r\n        titleIcon: FIconUser,\r\n        titleIconColor: &amp;#39;var(--primary-color-8)&amp;#39;,\r\n        content: &amp;#39;小明请求加您为好友。&amp;#39;,\r\n        showCancel: true,\r\n        confirmText: &amp;#39;通过&amp;#39;,\r\n        cancelText: &amp;#39;拒绝&amp;#39;\r\n      })\r\n    }}&amp;gt;标题带图标&amp;lt;/FButton&amp;gt;\r\n  &amp;lt;/div&amp;gt;)\r\n}" view={<Component16/>}/><br/><DemoItem title="API快捷调用" value="export const QuickConvenientTest = function (){\r\n  return (&amp;lt;div style={{display: &amp;#39;flex&amp;#39;, gap: 10, flexWrap: &amp;#39;wrap&amp;#39;}}&amp;gt;\r\n    &amp;lt;FButton variant=&amp;quot;outline&amp;quot; type=&amp;quot;primary&amp;quot; onClick={\r\n      () =&amp;gt; {\r\n        febDialog.alert(&amp;#39;请求成功&amp;#39;,&amp;#39;审批已提交，预计7个工作日内处理，请耐心等待&amp;#39;)\r\n      }\r\n    }&amp;gt;提醒&amp;lt;/FButton&amp;gt;\r\n    &amp;lt;FButton variant=&amp;quot;outline&amp;quot; type=&amp;quot;primary&amp;quot; onClick={\r\n      () =&amp;gt; {\r\n        febDialog.confirm(&amp;#39;提醒&amp;#39;,&amp;#39;您的审批已通过，是否前往查看？&amp;#39;,&amp;#39;primary&amp;#39;)\r\n      }\r\n    }&amp;gt;主题询问&amp;lt;/FButton&amp;gt;\r\n    &amp;lt;FButton variant=&amp;quot;outline&amp;quot; type=&amp;quot;default&amp;quot; onClick={\r\n      () =&amp;gt; {\r\n        febDialog.confirm(&amp;#39;亲爱的用户：&amp;#39;,&amp;#39;您觉得我们的组件库好用吗，好用的话麻烦给个好评可以不？&amp;#39;,&amp;#39;default&amp;#39;)\r\n      }\r\n    }&amp;gt;默认询问&amp;lt;/FButton&amp;gt;\r\n    &amp;lt;FButton variant=&amp;quot;outline&amp;quot; type=&amp;quot;warn&amp;quot; onClick={\r\n      () =&amp;gt; {\r\n        febDialog.confirm(&amp;#39;警告&amp;#39;,&amp;#39;你的网络环境不安全，确定要继续操作吗？&amp;#39;,&amp;#39;warn&amp;#39;)\r\n      }\r\n    }&amp;gt;警告询问&amp;lt;/FButton&amp;gt;\r\n    &amp;lt;FButton variant=&amp;quot;outline&amp;quot; type=&amp;quot;danger&amp;quot; onClick={\r\n      () =&amp;gt; {\r\n        febDialog.confirm(&amp;#39;警告&amp;#39;,&amp;#39;删除后图片不可恢复，请确定是否继续？&amp;#39;,&amp;#39;danger&amp;#39;)\r\n      }\r\n    }&amp;gt;危险询问&amp;lt;/FButton&amp;gt;\r\n    &amp;lt;/div&amp;gt;)\r\n}" view={<Component17/>}/></div></>},{label: '抽屉（FDrawer）', path: '/drawer', element: <><h1>抽屉（FDrawer）</h1><div><DemoItem title="测试" value="export const FDrawerTest = function () {\r\n  const [visible1, setVisible1] = useState(false)\r\n  const [visible2, setVisible2] = useState(false)\r\n  const [visible3, setVisible3] = useState(false)\r\n  const [visible4, setVisible4] = useState(false)\r\n\r\n  return (&amp;lt;&amp;gt;\r\n    &amp;lt;FButton onClick={() =&amp;gt; {\r\n      setVisible1(true)\r\n    }}&amp;gt;右边弹出&amp;lt;/FButton&amp;gt;\r\n    &amp;lt;FDrawer showCancel showConfirm closeOnClickModal visible={visible1} onClose={() =&amp;gt; {\r\n      setVisible1(false)\r\n    }} /&amp;gt;\r\n    &amp;lt;FButton onClick={() =&amp;gt; {\r\n      setVisible2(true)\r\n    }}&amp;gt;左边弹出&amp;lt;/FButton&amp;gt;\r\n    &amp;lt;FDrawer showCancel showConfirm closeOnClickModal direction=&amp;quot;ltr&amp;quot; visible={visible2} onClose={() =&amp;gt; {\r\n      setVisible2(false)\r\n    }} /&amp;gt;\r\n\r\n    &amp;lt;FButton onClick={() =&amp;gt; {\r\n      setVisible3(true)\r\n    }}&amp;gt;上边弹出&amp;lt;/FButton&amp;gt;\r\n    &amp;lt;FDrawer showCancel showConfirm closeOnClickModal direction=&amp;quot;ttb&amp;quot; visible={visible3} onClose={() =&amp;gt; {\r\n      setVisible3(false)\r\n    }} /&amp;gt;\r\n\r\n    &amp;lt;FButton onClick={() =&amp;gt; {\r\n      setVisible4(true)\r\n    }}&amp;gt;下边弹出&amp;lt;/FButton&amp;gt;\r\n    &amp;lt;FDrawer showCancel showConfirm closeOnClickModal direction=&amp;quot;btt&amp;quot; visible={visible4} onClose={() =&amp;gt; {\r\n      setVisible4(false)\r\n    }} /&amp;gt;\r\n  &amp;lt;/&amp;gt;)\r\n}" view={<Component18/>}/></div></>},{label: '图标（Icon）', path: '/icon', element: <><h1>图标（Icon）</h1><div><DemoItem title="图标" value="export const IconTest = function () {\r\n    return (&amp;lt;&amp;gt;\r\n        &amp;lt;FIconBack /&amp;gt;\r\n        &amp;lt;FIconNext /&amp;gt;\r\n    &amp;lt;/&amp;gt;)\r\n}" view={<Component19/>}/></div></>},{label: '布局组件（FLayout）', path: '/layout', element: <><h1>布局组件（FLayout）</h1><div><DemoItem title="默认" value="export const DefaultTest = function () {\r\n  return (\r\n    &amp;lt;FLayout style={{ height: 200 }} &amp;gt;\r\n      &amp;lt;FLayoutHead style={\r\n        {\r\n          background: &amp;#39;var(--primary-color-8)&amp;#39;,\r\n          color: &amp;#39;var(--text-color-16)&amp;#39;\r\n        }\r\n      }&amp;gt;\r\n        顶部\r\n      &amp;lt;/FLayoutHead&amp;gt;\r\n      &amp;lt;FLayoutAside style={\r\n        {\r\n          display: &amp;#39;flex&amp;#39;,\r\n          flexDirection: &amp;#39;column&amp;#39;,\r\n          gap: &amp;#39;10px&amp;#39;,\r\n          background: &amp;#39;var(--primary-color-14)&amp;#39;,\r\n          color: &amp;#39;var(--text-color-16)&amp;#39;\r\n        }\r\n      }&amp;gt;\r\n        侧边栏\r\n      &amp;lt;/FLayoutAside&amp;gt;\r\n      &amp;lt;FLayoutContent style={\r\n        {\r\n          background: &amp;#39;var(--primary-color-16)&amp;#39;,\r\n          color: &amp;#39;var(--text-color-1)&amp;#39;\r\n        }\r\n      }&amp;gt;内容区&amp;lt;/FLayoutContent&amp;gt;\r\n      &amp;lt;FLayoutFooter style={\r\n        {\r\n          background: &amp;#39;var(--primary-color-8)&amp;#39;,\r\n          color: &amp;#39;var(--text-color-16)&amp;#39;\r\n        }\r\n      }&amp;gt;底部&amp;lt;/FLayoutFooter&amp;gt;\r\n    &amp;lt;/FLayout&amp;gt;\r\n  )\r\n}" view={<Component20/>}/><br/><DemoItem title="侧边栏在右侧" value="export const ASideTest = function () {\r\n  return (\r\n    &amp;lt;FLayout style={{ height: 200 }} &amp;gt;\r\n      &amp;lt;FLayoutHead style={\r\n        {\r\n          background: &amp;#39;var(--primary-color-8)&amp;#39;,\r\n          color: &amp;#39;var(--text-color-16)&amp;#39;\r\n        }\r\n      }&amp;gt;\r\n        顶部\r\n      &amp;lt;/FLayoutHead&amp;gt;\r\n      &amp;lt;FLayoutAside position=&amp;quot;right&amp;quot; style={\r\n        {\r\n          display: &amp;#39;flex&amp;#39;,\r\n          flexDirection: &amp;#39;column&amp;#39;,\r\n          gap: &amp;#39;10px&amp;#39;,\r\n          background: &amp;#39;var(--primary-color-14)&amp;#39;,\r\n          color: &amp;#39;var(--text-color-16)&amp;#39;\r\n        }\r\n      }&amp;gt;\r\n        侧边栏\r\n      &amp;lt;/FLayoutAside&amp;gt;\r\n      &amp;lt;FLayoutContent style={\r\n        {\r\n          background: &amp;#39;var(--primary-color-16)&amp;#39;,\r\n          color: &amp;#39;var(--text-color-1)&amp;#39;\r\n        }\r\n      }&amp;gt;内容区&amp;lt;/FLayoutContent&amp;gt;\r\n      &amp;lt;FLayoutFooter style={\r\n        {\r\n          background: &amp;#39;var(--primary-color-8)&amp;#39;,\r\n          color: &amp;#39;var(--text-color-16)&amp;#39;\r\n        }\r\n      }&amp;gt;底部&amp;lt;/FLayoutFooter&amp;gt;\r\n    &amp;lt;/FLayout&amp;gt;\r\n  )\r\n}" view={<Component21/>}/><br/><DemoItem title="显示边界" value="export const DivTest = function () {\r\n  return (\r\n    &amp;lt;FLayout style={{ height: 200 }}&amp;gt;\r\n      &amp;lt;FLayoutHead showDiv&amp;gt;\r\n        顶部\r\n      &amp;lt;/FLayoutHead&amp;gt;\r\n      &amp;lt;FLayoutAside showDiv&amp;gt;\r\n        侧边栏\r\n      &amp;lt;/FLayoutAside&amp;gt;\r\n      &amp;lt;FLayoutContent&amp;gt;内容区&amp;lt;/FLayoutContent&amp;gt;\r\n      &amp;lt;FLayoutFooter showDiv&amp;gt;底部&amp;lt;/FLayoutFooter&amp;gt;\r\n    &amp;lt;/FLayout&amp;gt;\r\n  )\r\n}" view={<Component22/>}/><br/><DemoItem title="只显示顶部和内容区" value="export const Test1 = function () {\r\n  return (\r\n    &amp;lt;FLayout style={{ height: 200 }} &amp;gt;\r\n      &amp;lt;FLayoutHead style={\r\n        {\r\n          background: &amp;#39;var(--primary-color-8)&amp;#39;,\r\n          color: &amp;#39;var(--text-color-16)&amp;#39;\r\n        }\r\n      }&amp;gt;\r\n        顶部\r\n      &amp;lt;/FLayoutHead&amp;gt;\r\n      &amp;lt;FLayoutContent style={\r\n        {\r\n          background: &amp;#39;var(--primary-color-16)&amp;#39;,\r\n          color: &amp;#39;var(--text-color-1)&amp;#39;\r\n        }\r\n      }&amp;gt;内容区&amp;lt;/FLayoutContent&amp;gt;\r\n    &amp;lt;/FLayout&amp;gt;\r\n  )\r\n}" view={<Component23/>}/><br/><DemoItem title="只显示侧边栏和内容区" value="export const Test2 = function () {\r\n  return (\r\n    &amp;lt;FLayout style={{ height: 200 }} &amp;gt;\r\n      &amp;lt;FLayoutAside style={\r\n        {\r\n          display: &amp;#39;flex&amp;#39;,\r\n          flexDirection: &amp;#39;column&amp;#39;,\r\n          gap: &amp;#39;10px&amp;#39;,\r\n          background: &amp;#39;var(--primary-color-5)&amp;#39;,\r\n          color: &amp;#39;var(--text-color-16)&amp;#39;\r\n        }\r\n      }&amp;gt;\r\n        侧边栏\r\n      &amp;lt;/FLayoutAside&amp;gt;\r\n      &amp;lt;FLayoutContent style={\r\n        {\r\n          background: &amp;#39;var(--primary-color-16)&amp;#39;,\r\n          color: &amp;#39;var(--text-color-1)&amp;#39;\r\n        }\r\n      }&amp;gt;内容区&amp;lt;/FLayoutContent&amp;gt;\r\n    &amp;lt;/FLayout&amp;gt;\r\n  )\r\n}" view={<Component24/>}/><br/><DemoItem title="只显示底部和内容区" value="export const Test3 = function () {\r\n  return (\r\n    &amp;lt;FLayout style={{ height: 200 }} &amp;gt;\r\n      &amp;lt;FLayoutContent style={\r\n        {\r\n          background: &amp;#39;var(--primary-color-16)&amp;#39;,\r\n          color: &amp;#39;var(--text-color-1)&amp;#39;\r\n        }\r\n      }&amp;gt;内容区&amp;lt;/FLayoutContent&amp;gt;\r\n      &amp;lt;FLayoutFooter style={\r\n        {\r\n          background: &amp;#39;var(--primary-color-5)&amp;#39;,\r\n          color: &amp;#39;var(--text-color-16)&amp;#39;\r\n        }\r\n      }&amp;gt;底部&amp;lt;/FLayoutFooter&amp;gt;\r\n    &amp;lt;/FLayout&amp;gt;\r\n  )\r\n}" view={<Component25/>}/></div></>},{label: '加载（FLoading）', path: '/loading', element: <><h1>加载（FLoading）</h1><div><DemoItem title="不同速度" value="export const SpeedTest = function () {\r\n  return (&amp;lt;div style={{ display: &amp;#39;flex&amp;#39;, flexWrap: &amp;#39;wrap&amp;#39;, gap:90 }}&amp;gt;\r\n    {[&amp;#39;normal&amp;#39;, &amp;#39;fast&amp;#39;, &amp;#39;slow&amp;#39;].map(speed =&amp;gt; (\r\n      &amp;lt;div key={speed} style={{textAlign: &amp;#39;center&amp;#39;}}&amp;gt;\r\n        &amp;lt;FLoading speed={speed as FLoadingSpeed} /&amp;gt;\r\n        &amp;lt;div style={{marginTop: 10}}&amp;gt;{speed}&amp;lt;/div&amp;gt;\r\n      &amp;lt;/div&amp;gt;\r\n    ))}\r\n  &amp;lt;/div&amp;gt;)\r\n}" view={<Component26/>}/><br/><DemoItem title="自定义速度" value="export const DurationTest = function () {\r\n  return (&amp;lt;div style={{ display: &amp;#39;flex&amp;#39;, flexWrap: &amp;#39;wrap&amp;#39;, gap: 30 }}&amp;gt;\r\n    {[500, 1000, 2000, 3000].map(dur =&amp;gt; (\r\n      &amp;lt;div key={dur} style={{textAlign: &amp;#39;center&amp;#39;}}&amp;gt;\r\n        &amp;lt;FLoading duration={dur} /&amp;gt;\r\n        &amp;lt;div style={{marginTop: 10}}&amp;gt;{dur}ms/圈&amp;lt;/div&amp;gt;\r\n      &amp;lt;/div&amp;gt;\r\n    ))}\r\n  &amp;lt;/div&amp;gt;)\r\n}" view={<Component27/>}/><br/><DemoItem title="自定义颜色" value="export const ColorTest = function () {\r\n  return (&amp;lt;div style={{ display: &amp;#39;flex&amp;#39;, flexWrap: &amp;#39;wrap&amp;#39;, gap: 10 }}&amp;gt;\r\n    {[&amp;#39;red&amp;#39;, &amp;#39;blue&amp;#39;, &amp;#39;#00b2ff&amp;#39;,&amp;#39;yellow&amp;#39;,&amp;#39;pink&amp;#39;].map(color =&amp;gt; (\r\n      &amp;lt;div key={color} style={{textAlign: &amp;#39;center&amp;#39;}}&amp;gt;\r\n      &amp;lt;FLoading style={{ color }} /&amp;gt;\r\n      &amp;lt;div style={{marginTop: 10}}&amp;gt;{color}&amp;lt;/div&amp;gt;\r\n    &amp;lt;/div&amp;gt;\r\n    ))}\r\n  &amp;lt;/div&amp;gt;)\r\n}" view={<Component28/>}/></div></>},{label: '菜单（FMenu）', path: '/menu', element: <><h1>菜单（FMenu）</h1><div><DemoItem title="基础使用" value="export const FMenuTest = function () {\r\n  const [current, setCurrent] = useState(&amp;#39;pork&amp;#39;)\r\n  const items: FMenuItem[] = [\r\n    {\r\n      name: &amp;#39;cars&amp;#39;,\r\n      label: &amp;#39;汽车&amp;#39;\r\n    },\r\n    {\r\n      name: &amp;#39;foods&amp;#39;,\r\n      label: &amp;#39;食物&amp;#39;,\r\n      children: [\r\n        {\r\n          name: &amp;#39;meta&amp;#39;,\r\n          label: &amp;#39;肉类&amp;#39;,\r\n          children: [\r\n            {\r\n              name: &amp;#39;chicken&amp;#39;,\r\n              label: &amp;#39;鸡肉&amp;#39;\r\n            },\r\n            {\r\n              name: &amp;#39;beef&amp;#39;,\r\n              label: &amp;#39;牛肉&amp;#39;\r\n            }, {\r\n              name: &amp;#39;pork&amp;#39;,\r\n              label: &amp;#39;猪肉&amp;#39;\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          name: &amp;#39;vegetable&amp;#39;,\r\n          label: &amp;#39;蔬菜&amp;#39;,\r\n          children: [\r\n            {\r\n              name: &amp;#39;cabbage&amp;#39;,\r\n              label: &amp;#39;卷心菜&amp;#39;\r\n            },\r\n            {\r\n              name: &amp;#39;onion&amp;#39;,\r\n              label: &amp;#39;洋葱&amp;#39;\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          name: &amp;#39;fruit&amp;#39;,\r\n          label: &amp;#39;水果&amp;#39;,\r\n          children: []\r\n        },\r\n        {\r\n          name: &amp;#39;hot-strip&amp;#39;,\r\n          label: &amp;#39;辣条&amp;#39;\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      name: &amp;#39;colors&amp;#39;,\r\n      label: &amp;#39;颜色&amp;#39;,\r\n      children: [\r\n        {\r\n          name: &amp;#39;blue&amp;#39;,\r\n          label: &amp;#39;蓝色&amp;#39;\r\n        }, {\r\n          name: &amp;#39;red&amp;#39;,\r\n          label: &amp;#39;红色&amp;#39;\r\n        }, {\r\n          name: &amp;#39;purple&amp;#39;,\r\n          label: &amp;#39;紫色&amp;#39;\r\n        }, {\r\n          name: &amp;#39;black&amp;#39;,\r\n          label: &amp;#39;黑色&amp;#39;,\r\n          disabled: true\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n  return (\r\n    &amp;lt;div&amp;gt;\r\n      &amp;lt;div style={{ height: 30 }}&amp;gt;当前选中的：{current}&amp;lt;/div&amp;gt;\r\n      &amp;lt;FMenu onChange={setCurrent} default={current} style={{ width: 200 }} items={items}&amp;gt;&amp;lt;/FMenu&amp;gt;\r\n    &amp;lt;/div&amp;gt;\r\n  )\r\n}" view={<Component29/>}/><br/><DemoItem title="带分组" value="export const GroupTest = function () {\r\n  const [current, setCurrent] = useState(&amp;#39;pork&amp;#39;)\r\n  const items: FMenuItem[] = [\r\n    {\r\n      name: &amp;#39;cars&amp;#39;,\r\n      label: &amp;#39;汽车&amp;#39;,\r\n      children: [\r\n        {\r\n          name: &amp;#39;bench&amp;#39;,\r\n          label: &amp;#39;奔驰&amp;#39;\r\n        },\r\n        {\r\n          name: &amp;#39;bmw&amp;#39;,\r\n          label: &amp;#39;宝马&amp;#39;\r\n        }, {\r\n          name: &amp;#39;byd&amp;#39;,\r\n          label: &amp;#39;比亚迪&amp;#39;\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      name: &amp;#39;foods&amp;#39;,\r\n      label: &amp;#39;食物&amp;#39;,\r\n      children: [\r\n        {\r\n          name: &amp;#39;meta&amp;#39;,\r\n          label: &amp;#39;肉类&amp;#39;,\r\n          children: [\r\n            {\r\n              name: &amp;#39;chicken&amp;#39;,\r\n              label: &amp;#39;鸡肉&amp;#39;,\r\n              children: [\r\n                {\r\n                  name: &amp;#39;chicken-breast&amp;#39;,\r\n                  label: &amp;#39;鸡胸肉&amp;#39;\r\n                },\r\n                {\r\n                  name: &amp;#39;chicken-wings&amp;#39;,\r\n                  label: &amp;#39;鸡翅&amp;#39;\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              name: &amp;#39;beef&amp;#39;,\r\n              label: &amp;#39;牛肉&amp;#39;\r\n            }, {\r\n              name: &amp;#39;pork&amp;#39;,\r\n              label: &amp;#39;猪肉&amp;#39;\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          name: &amp;#39;vegetable&amp;#39;,\r\n          label: &amp;#39;蔬菜&amp;#39;,\r\n          children: [\r\n            {\r\n              name: &amp;#39;cabbage&amp;#39;,\r\n              label: &amp;#39;卷心菜&amp;#39;\r\n            },\r\n            {\r\n              name: &amp;#39;onion&amp;#39;,\r\n              label: &amp;#39;洋葱&amp;#39;\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      name: &amp;#39;colors&amp;#39;,\r\n      label: &amp;#39;颜色&amp;#39;,\r\n      children: [\r\n        {\r\n          name: &amp;#39;blue&amp;#39;,\r\n          label: &amp;#39;蓝色&amp;#39;\r\n        }, {\r\n          name: &amp;#39;red&amp;#39;,\r\n          label: &amp;#39;红色&amp;#39;\r\n        }, {\r\n          name: &amp;#39;purple&amp;#39;,\r\n          label: &amp;#39;紫色&amp;#39;\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n  return (\r\n    &amp;lt;div&amp;gt;\r\n      &amp;lt;div style={{ height: 30 }}&amp;gt;当前选中的：{current}&amp;lt;/div&amp;gt;\r\n      &amp;lt;FMenu onChange={setCurrent} group default={current} style={{ width: 200 }} items={items}&amp;gt;&amp;lt;/FMenu&amp;gt;\r\n    &amp;lt;/div&amp;gt;\r\n  )\r\n}" view={<Component30/>}/><br/><DemoItem title="带图标" value="export const FMenuIconTest = function () {\r\n  const [current, setCurrent] = useState(&amp;#39;data&amp;#39;)\r\n  const items: FMenuItem[] = [\r\n    {\r\n      name: &amp;#39;account&amp;#39;,\r\n      icon: FIconUser,\r\n      label: &amp;#39;账户管理&amp;#39;,\r\n      children: [\r\n        {\r\n          name: &amp;#39;balance&amp;#39;,\r\n          icon: FIconBankCard,\r\n          label: &amp;#39;余额&amp;#39;\r\n        }, {\r\n          name: &amp;#39;safety&amp;#39;,\r\n          icon: FIconSafety,\r\n          label: &amp;#39;安全&amp;#39;\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      name: &amp;#39;system&amp;#39;,\r\n      icon: FIconSystem,\r\n      label: &amp;#39;系统管理&amp;#39;,\r\n      children: [\r\n        {\r\n          name: &amp;#39;dashboard&amp;#39;,\r\n          label: &amp;#39;仪表盘&amp;#39;,\r\n          icon: FIconDataSheet\r\n        }, {\r\n          name: &amp;#39;data&amp;#39;,\r\n          label: &amp;#39;数据&amp;#39;,\r\n          icon: FIconData\r\n        }, {\r\n          name: &amp;#39;visual&amp;#39;,\r\n          label: &amp;#39;可视化&amp;#39;,\r\n          icon: FIconChartLine\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      name: &amp;#39;setting&amp;#39;,\r\n      icon: FIconSettingOne,\r\n      label: &amp;#39;设置&amp;#39;,\r\n      children: [\r\n        {\r\n          name: &amp;#39;reuse&amp;#39;,\r\n          icon: FIconDeleteFour,\r\n          label: &amp;#39;回收站&amp;#39;\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n  return (\r\n    &amp;lt;div&amp;gt;\r\n      &amp;lt;div style={{ height: 30 }}&amp;gt;当前选中的：{current}&amp;lt;/div&amp;gt;\r\n      &amp;lt;FMenu onChange={setCurrent} default={current} style={{ width: 200 }} items={items}&amp;gt;&amp;lt;/FMenu&amp;gt;\r\n    &amp;lt;/div&amp;gt;\r\n  )\r\n}" view={<Component31/>}/><br/><DemoItem title="可折叠" value="export const CollapseTest = function () {\r\n\r\n  let status = false\r\n  const [collapsed, setCollapsed] = useState(status)\r\n  const [current, setCurrent] = useState(&amp;#39;password&amp;#39;)\r\n  const items: FMenuItem[] = [\r\n    {\r\n      name: &amp;#39;account&amp;#39;,\r\n      icon: FIconUser,\r\n      label: &amp;#39;账户管理&amp;#39;,\r\n      children: [\r\n        {\r\n          name: &amp;#39;balance&amp;#39;,\r\n          icon: FIconBankCard,\r\n          label: &amp;#39;余额&amp;#39;\r\n        }, {\r\n          name: &amp;#39;safety&amp;#39;,\r\n          icon: FIconSafety,\r\n          label: &amp;#39;安全&amp;#39;,\r\n          children: [\r\n            {\r\n              name: &amp;#39;password&amp;#39;,\r\n              label: &amp;#39;密码&amp;#39;\r\n            }, {\r\n              name: &amp;#39;access&amp;#39;,\r\n              label: &amp;#39;权限&amp;#39;\r\n            }, {\r\n              name: &amp;#39;device&amp;#39;,\r\n              label: &amp;#39;登录设备&amp;#39;\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      name: &amp;#39;system&amp;#39;,\r\n      icon: FIconSystem,\r\n      label: &amp;#39;系统管理&amp;#39;,\r\n      children: [\r\n        {\r\n          name: &amp;#39;dashboard&amp;#39;,\r\n          label: &amp;#39;仪表盘&amp;#39;,\r\n          icon: FIconDataSheet\r\n        }, {\r\n          name: &amp;#39;data&amp;#39;,\r\n          label: &amp;#39;数据&amp;#39;,\r\n          icon: FIconData\r\n        }, {\r\n          name: &amp;#39;visual&amp;#39;,\r\n          label: &amp;#39;可视化&amp;#39;,\r\n          icon: FIconChartLine\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      name: &amp;#39;setting&amp;#39;,\r\n      icon: FIconSettingOne,\r\n      label: &amp;#39;设置&amp;#39;,\r\n      children: [\r\n        {\r\n          name: &amp;#39;reuse&amp;#39;,\r\n          icon: FIconDeleteFour,\r\n          label: &amp;#39;回收站&amp;#39;\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n  const onClick = () =&amp;gt; {\r\n    setCollapsed(status = !status)\r\n  }\r\n  return (\r\n    &amp;lt;div&amp;gt;\r\n      &amp;lt;div style={{ height: 30 }}&amp;gt;当前选中的：{current}&amp;lt;/div&amp;gt;\r\n      &amp;lt;FMenu collapsed={collapsed} onChange={setCurrent} default={current} style={{ width: 200 }} items={items}&amp;gt;&amp;lt;/FMenu&amp;gt;\r\n      &amp;lt;FButton variant=&amp;quot;text&amp;quot; type=&amp;quot;primary&amp;quot; onClick={onClick}&amp;gt;展开&amp;lt;/FButton&amp;gt;\r\n    &amp;lt;/div&amp;gt;\r\n  )\r\n}" view={<Component32/>}/></div></>},{label: '分页器（FPagination）', path: '/pagination', element: <><h1>分页器（FPagination）</h1><div><DemoItem title="undefined" value="export const Test = function () {\r\n      return (&amp;lt;&amp;gt;FTable&amp;lt;/&amp;gt;)\r\n}" view={<Component33/>}/></div></>},{label: '进度条（FProgress）', path: '/progress', element: <><h1>进度条（FProgress）</h1><div><DemoItem title="默认使用" value="export const FProgressTest = function () {\r\n  let v = 0\r\n\r\n  let task: any = null\r\n  const [value, setValue] = useState(v)\r\n  const increase = () =&amp;gt; {\r\n    if (v === 100) {\r\n      setValue(v = 0)\r\n    }\r\n    if (task) {\r\n      clearInterval(task)\r\n    }\r\n    task = setInterval(() =&amp;gt; {\r\n      setValue(++v)\r\n      if (task &amp;&amp; v &amp;gt;= 100) clearInterval(task)\r\n    }, 50 + Math.random() * 50)\r\n  }\r\n  return (&amp;lt;&amp;gt;\r\n    &amp;lt;FButton onClick={increase}&amp;gt;播放&amp;lt;/FButton&amp;gt;\r\n    &amp;lt;FProgress value={value}&amp;gt;&amp;lt;/FProgress&amp;gt;\r\n  &amp;lt;/&amp;gt;)\r\n}" view={<Component34/>}/><br/><DemoItem title="不同主题" value="export const ThemeTest = function () {\r\n  let v = 0\r\n\r\n  let task: any = null\r\n  const [value, setValue] = useState(v)\r\n  const increase = () =&amp;gt; {\r\n    if (v === 100) {\r\n      setValue(v = 0)\r\n    }\r\n    if (task) {\r\n      clearInterval(task)\r\n    }\r\n    task = setInterval(() =&amp;gt; {\r\n      setValue(++v)\r\n      if (task &amp;&amp; v &amp;gt;= 100) clearInterval(task)\r\n    }, 50 + Math.random() * 50)\r\n  }\r\n  return (&amp;lt;&amp;gt;\r\n    &amp;lt;FButton onClick={increase}&amp;gt;播放&amp;lt;/FButton&amp;gt;\r\n    &amp;lt;FProgress value={value}&amp;gt;&amp;lt;/FProgress&amp;gt;\r\n    &amp;lt;FProgress theme=&amp;quot;safe&amp;quot; value={value}&amp;gt;&amp;lt;/FProgress&amp;gt;\r\n    &amp;lt;FProgress theme=&amp;quot;danger&amp;quot; value={value}&amp;gt;&amp;lt;/FProgress&amp;gt;\r\n    &amp;lt;FProgress theme=&amp;quot;warn&amp;quot; value={value}&amp;gt;&amp;lt;/FProgress&amp;gt;\r\n  &amp;lt;/&amp;gt;)\r\n}" view={<Component35/>}/><br/><DemoItem title="自定义精度" value="export const Test2 = function () {\r\n  let v = 0\r\n\r\n  let task: any = null\r\n  const [value, setValue] = useState(v)\r\n  const increase = () =&amp;gt; {\r\n    if (v &amp;gt;= 100) {\r\n      setValue(v = 0)\r\n    }\r\n    if (task) {\r\n      clearInterval(task)\r\n    }\r\n    task = setInterval(() =&amp;gt; {\r\n      setValue(v += 9.521)\r\n      if (task &amp;&amp; v &amp;gt;= 100) clearInterval(task)\r\n    }, 500)\r\n  }\r\n  return (&amp;lt;&amp;gt;\r\n    &amp;lt;FButton onClick={increase}&amp;gt;播放&amp;lt;/FButton&amp;gt;\r\n    &amp;lt;FProgress value={value} digits={1}&amp;gt;&amp;lt;/FProgress&amp;gt;\r\n    &amp;lt;FProgress value={value} digits={2}&amp;gt;&amp;lt;/FProgress&amp;gt;\r\n    &amp;lt;FProgress value={value} digits={3}&amp;gt;&amp;lt;/FProgress&amp;gt;\r\n  &amp;lt;/&amp;gt;)\r\n}" view={<Component36/>}/><br/><DemoItem title="文字显示在内部" value="export const Test3 = function () {\r\n  let v = 0\r\n\r\n  let task: any = null\r\n  const [value, setValue] = useState(v)\r\n  const increase = () =&amp;gt; {\r\n    if (v === 100) {\r\n      setValue(v = 0)\r\n    }\r\n    if (task) {\r\n      clearInterval(task)\r\n    }\r\n    task = setInterval(() =&amp;gt; {\r\n      setValue(++v)\r\n      if (task &amp;&amp; v &amp;gt;= 100) clearInterval(task)\r\n    }, 100 + Math.random() * 50)\r\n  }\r\n  return (&amp;lt;&amp;gt;\r\n    &amp;lt;FButton onClick={increase}&amp;gt;播放&amp;lt;/FButton&amp;gt;\r\n    &amp;lt;FProgress strokeWidth={2} type=&amp;quot;inner&amp;quot; value={value}&amp;gt;&amp;lt;/FProgress&amp;gt;\r\n  &amp;lt;/&amp;gt;)\r\n}" view={<Component37/>}/></div></>},{label: '单选框（FRadio）', path: '/radio', element: <><h1>单选框（FRadio）</h1><div><DemoItem title="基础单选框" value="export const BaseTest = function () {\r\n    return (\r\n        &amp;lt;div style={{ display: &amp;quot;flex&amp;quot;, width: &amp;#39;800px&amp;#39;, height: &amp;#39;30px&amp;#39;, backgroundColor: &amp;#39;#fff&amp;#39;, padding: &amp;#39;10px&amp;#39;, alignItems: &amp;#39;center&amp;#39; }}&amp;gt;\r\n            &amp;lt;FRadio&amp;gt;默认初始未选中&amp;lt;/FRadio&amp;gt; &amp;nbsp;&amp;nbsp;\r\n            &amp;lt;FRadio defaultChecked&amp;gt;初始选中&amp;lt;/FRadio&amp;gt; &amp;nbsp;&amp;nbsp;\r\n            &amp;lt;FRadio checked={false}&amp;gt;未选中&amp;lt;/FRadio&amp;gt; &amp;nbsp;&amp;nbsp;\r\n            &amp;lt;FRadio allowUncheck&amp;gt;取消选中&amp;lt;/FRadio&amp;gt; &amp;nbsp;&amp;nbsp;\r\n            &amp;lt;FRadio checked&amp;gt;已选中&amp;lt;/FRadio&amp;gt; &amp;nbsp;&amp;nbsp;\r\n            &amp;lt;FRadio checked={false} disabled&amp;gt;禁用未选中&amp;lt;/FRadio&amp;gt; &amp;nbsp;&amp;nbsp;\r\n            &amp;lt;FRadio checked disabled&amp;gt;禁用已选中&amp;lt;/FRadio&amp;gt; &amp;nbsp;&amp;nbsp;\r\n        &amp;lt;/div&amp;gt;\r\n\r\n    )\r\n}" view={<Component38/>}/><br/><DemoItem title="基础配置" value="export const ConfigTest = function () {\r\n\r\n    const [allowUncheck, setAllowUncheck] = useState&amp;lt;boolean&amp;gt;(false)\r\n    const [checked, setChecked] = useState&amp;lt;boolean&amp;gt;(false)\r\n    const [disabled, setDisabled] = useState&amp;lt;boolean&amp;gt;(false)\r\n    const [readonly, setReadonly] = useState&amp;lt;boolean&amp;gt;(false)\r\n\r\n    return (\r\n        &amp;lt;div style={{ display: &amp;quot;flex&amp;quot;, width: &amp;#39;800px&amp;#39;, height: &amp;#39;120px&amp;#39;, backgroundColor: &amp;#39;#fff&amp;#39;, padding: &amp;#39;10px&amp;#39; }}&amp;gt;\r\n            &amp;lt;div className=&amp;quot;left&amp;quot; style={{ width: &amp;quot;70%&amp;quot;, margin: &amp;quot;auto&amp;quot; }}&amp;gt;\r\n                &amp;lt;FRadio allowUncheck={allowUncheck}&amp;gt;allowUncheck&amp;lt;/FRadio&amp;gt; &amp;lt;br /&amp;gt;\r\n                &amp;lt;FRadio checked={checked} &amp;gt;checked&amp;lt;/FRadio&amp;gt; &amp;lt;br /&amp;gt;\r\n                &amp;lt;FRadio disabled={disabled} checked={checked}&amp;gt;disabled | checked&amp;lt;/FRadio&amp;gt; &amp;lt;br /&amp;gt;\r\n                &amp;lt;FRadio readonly={readonly}&amp;gt;readonly&amp;lt;/FRadio&amp;gt; &amp;lt;br /&amp;gt;\r\n            &amp;lt;/div&amp;gt;\r\n            &amp;lt;div className=&amp;quot;right&amp;quot; style={{ width: &amp;quot;30%&amp;quot; }}&amp;gt;\r\n                &amp;lt;div className=&amp;quot;item&amp;quot; style={{ display: &amp;quot;flex&amp;quot;, alignItems: &amp;quot;center&amp;quot;, justifyContent: &amp;quot;space-between&amp;quot;, height: &amp;quot;30px&amp;quot; }}&amp;gt;\r\n                    &amp;lt;span&amp;gt;allowUncheck&amp;lt;/span&amp;gt;\r\n                    &amp;lt;FSwitch onChange={(v) =&amp;gt; setAllowUncheck(v as boolean)} size=&amp;#39;small&amp;#39; value={allowUncheck}&amp;gt;&amp;lt;/FSwitch&amp;gt;\r\n                &amp;lt;/div&amp;gt;\r\n                &amp;lt;div className=&amp;quot;item&amp;quot; style={{ display: &amp;quot;flex&amp;quot;, alignItems: &amp;quot;center&amp;quot;, justifyContent: &amp;quot;space-between&amp;quot;, height: &amp;quot;30px&amp;quot; }}&amp;gt;\r\n                    &amp;lt;span&amp;gt;checked&amp;lt;/span&amp;gt;\r\n                    &amp;lt;FSwitch onChange={(v) =&amp;gt; setChecked(v as boolean)} size=&amp;#39;small&amp;#39; value={checked}&amp;gt;&amp;lt;/FSwitch&amp;gt;\r\n                &amp;lt;/div&amp;gt;\r\n                &amp;lt;div className=&amp;quot;item&amp;quot; style={{ display: &amp;quot;flex&amp;quot;, alignItems: &amp;quot;center&amp;quot;, justifyContent: &amp;quot;space-between&amp;quot;, height: &amp;quot;30px&amp;quot; }}&amp;gt;\r\n                    &amp;lt;span&amp;gt;disabled&amp;lt;/span&amp;gt;\r\n                    &amp;lt;FSwitch onChange={(v) =&amp;gt; setDisabled(v as boolean)} size=&amp;#39;small&amp;#39; value={disabled}&amp;gt;&amp;lt;/FSwitch&amp;gt;\r\n                &amp;lt;/div&amp;gt;\r\n                &amp;lt;div className=&amp;quot;item&amp;quot; style={{ display: &amp;quot;flex&amp;quot;, alignItems: &amp;quot;center&amp;quot;, justifyContent: &amp;quot;space-between&amp;quot;, height: &amp;quot;30px&amp;quot; }}&amp;gt;\r\n                    &amp;lt;span&amp;gt;readonly&amp;lt;/span&amp;gt;\r\n                    &amp;lt;FSwitch onChange={(v) =&amp;gt; setReadonly(v as boolean)} size=&amp;#39;small&amp;#39; value={readonly}&amp;gt;&amp;lt;/FSwitch&amp;gt;\r\n                &amp;lt;/div&amp;gt;\r\n            &amp;lt;/div&amp;gt;\r\n        &amp;lt;/div&amp;gt;\r\n\r\n    )\r\n}" view={<Component39/>}/><br/><DemoItem title="按钮单选框" value="export const ButtonTest = function () {\r\n    const filledColor = { &amp;#39;--filled-color-inactive&amp;#39;: &amp;quot;#13ce66&amp;quot; }\r\n    return &amp;lt;div style={{ display: &amp;quot;flex&amp;quot;, width: &amp;#39;800px&amp;#39;, height: &amp;#39;60px&amp;#39;, backgroundColor: &amp;#39;#fff&amp;#39;, padding: &amp;#39;10px&amp;#39;, alignItems: &amp;#39;center&amp;#39;, flexWrap: &amp;#39;wrap&amp;#39; }}&amp;gt;\r\n        &amp;lt;FRadio type=&amp;#39;button&amp;#39;&amp;gt;线框样式&amp;lt;/FRadio&amp;gt; &amp;nbsp;&amp;nbsp;\r\n        &amp;lt;FRadio type=&amp;#39;button&amp;#39; variant=&amp;#39;filled&amp;#39; style={filledColor}&amp;gt;填充样式&amp;lt;/FRadio&amp;gt; &amp;nbsp;&amp;nbsp;\r\n        &amp;lt;FRadio type=&amp;#39;button&amp;#39; variant=&amp;#39;filled&amp;#39;&amp;gt;填充样式&amp;lt;/FRadio&amp;gt; &amp;nbsp;&amp;nbsp;\r\n        &amp;lt;FRadio type=&amp;#39;button&amp;#39; disabled&amp;gt;线框+禁用&amp;lt;/FRadio&amp;gt; &amp;nbsp;&amp;nbsp;\r\n        &amp;lt;FRadio type=&amp;#39;button&amp;#39; variant=&amp;#39;filled&amp;#39; disabled&amp;gt;填充+禁用&amp;lt;/FRadio&amp;gt; &amp;nbsp;&amp;nbsp;\r\n        &amp;lt;FRadio type=&amp;#39;button&amp;#39; checked disabled&amp;gt;线框+禁用+选中&amp;lt;/FRadio&amp;gt; &amp;nbsp;&amp;nbsp;\r\n        &amp;lt;FRadio type=&amp;#39;button&amp;#39; variant=&amp;#39;filled&amp;#39; disabled checked&amp;gt;填充+禁用+未选中&amp;lt;/FRadio&amp;gt; &amp;nbsp;&amp;nbsp;\r\n    &amp;lt;/div&amp;gt;\r\n}" view={<Component40/>}/><br/><DemoItem title="单选框组" value="export const GroupTest = function () {\r\n    const options1 = [{ label: &amp;#39;选项1&amp;#39;, value: 1, disabled: true }, { label: &amp;#39;选项2&amp;#39;, value: 2 }, { label: &amp;#39;选项3&amp;#39;, value: 3 }, { label: &amp;#39;选项4&amp;#39;, value: 4 }]\r\n    const [value2, setValue2] = useState&amp;lt;RadioValue&amp;gt;(1)\r\n\r\n    const options2 = [{ label: &amp;#39;选项1&amp;#39;, value: 1 }, { label: &amp;#39;选项2&amp;#39;, value: 2 }, { label: &amp;#39;选项3&amp;#39;, value: 3, disabled: true }, { label: &amp;#39;选项4&amp;#39;, value: 4 }]\r\n    const [value3, setValue3] = useState&amp;lt;RadioValue&amp;gt;(1)\r\n\r\n    return &amp;lt;div style={{ width: &amp;#39;800px&amp;#39;, height: &amp;#39;220px&amp;#39;, backgroundColor: &amp;#39;#fff&amp;#39;, padding: &amp;#39;10px&amp;#39;, alignItems: &amp;#39;center&amp;#39; }}&amp;gt;\r\n        &amp;lt;FRadio.Group options={options1} value={value2} onChange={(value) =&amp;gt; setValue2(value)} /&amp;gt; &amp;lt;br /&amp;gt;\r\n\r\n        &amp;lt;FRadio.Group value={value2} onChange={(value) =&amp;gt; setValue2(value)}&amp;gt;\r\n            &amp;lt;FRadio value={1}&amp;gt;选项1&amp;lt;/FRadio&amp;gt;\r\n            &amp;lt;FRadio value={2}&amp;gt;选项2&amp;lt;/FRadio&amp;gt;\r\n            &amp;lt;FRadio value={3} disabled={true}&amp;gt;选项3&amp;lt;/FRadio&amp;gt;\r\n            &amp;lt;FRadio value={4}&amp;gt;选项4&amp;lt;/FRadio&amp;gt;\r\n        &amp;lt;/FRadio.Group&amp;gt;&amp;lt;br /&amp;gt;\r\n\r\n        &amp;lt;FRadio.Group options={options1} type=&amp;#39;button&amp;#39; value={value2} onChange={(value) =&amp;gt; setValue2(value)} /&amp;gt; &amp;lt;br /&amp;gt;\r\n        &amp;lt;FRadio.Group options={options2} type=&amp;#39;button&amp;#39; variant=&amp;#39;primary-filled&amp;#39; value={value3} onChange={(value) =&amp;gt; setValue3(value)} /&amp;gt; &amp;lt;br /&amp;gt;\r\n        &amp;lt;FRadio.Group options={options2} type=&amp;#39;button&amp;#39; variant=&amp;#39;default-filled&amp;#39; value={value3} onChange={(value) =&amp;gt; setValue3(value)} /&amp;gt; &amp;lt;br /&amp;gt;\r\n    &amp;lt;/div&amp;gt;\r\n}" view={<Component41/>}/><br/><DemoItem title="尺寸" value="export const SizeTest = function () {\r\n    const options1 = [{ label: &amp;#39;选项1&amp;#39;, value: 1, disabled: true }, { label: &amp;#39;选项2&amp;#39;, value: 2 }, { label: &amp;#39;选项3&amp;#39;, value: 3 }, { label: &amp;#39;选项4&amp;#39;, value: 4 }]\r\n    const [value2, setValue2] = useState&amp;lt;RadioValue&amp;gt;(1)\r\n\r\n    const options2 = [{ label: &amp;#39;选项1&amp;#39;, value: 1 }, { label: &amp;#39;选项2&amp;#39;, value: 2 }, { label: &amp;#39;选项3&amp;#39;, value: 3, disabled: true }, { label: &amp;#39;选项4&amp;#39;, value: 4 }]\r\n    const [value3, setValue3] = useState&amp;lt;RadioValue&amp;gt;(1)\r\n\r\n    return &amp;lt;div style={{ width: &amp;#39;800px&amp;#39;, height: &amp;#39;130px&amp;#39;, backgroundColor: &amp;#39;#fff&amp;#39;, padding: &amp;#39;10px&amp;#39;, alignItems: &amp;#39;center&amp;#39; }}&amp;gt;\r\n        &amp;lt;FRadio.Group options={options1} type=&amp;#39;button&amp;#39; value={value2} onChange={(value) =&amp;gt; setValue2(value)} size=&amp;#39;small&amp;#39; /&amp;gt; &amp;lt;br /&amp;gt;\r\n        &amp;lt;FRadio.Group options={options2} type=&amp;#39;button&amp;#39; variant=&amp;#39;primary-filled&amp;#39; value={value3} onChange={(value) =&amp;gt; setValue3(value)} size=&amp;#39;medium&amp;#39; /&amp;gt; &amp;lt;br /&amp;gt;\r\n        &amp;lt;FRadio.Group options={options2} type=&amp;#39;button&amp;#39; variant=&amp;#39;default-filled&amp;#39; value={value3} onChange={(value) =&amp;gt; setValue3(value)} size=&amp;#39;large&amp;#39; /&amp;gt; &amp;lt;br /&amp;gt;\r\n    &amp;lt;/div&amp;gt;\r\n}" view={<Component42/>}/></div></>},{label: '开关（FSwitch）', path: '/siwtch', element: <><h1>开关（FSwitch）</h1><div><DemoItem title="尺寸" value="export const BaseTest = function () {\r\n  const [value, setValue] = useState(true)\r\n  return (\r\n    &amp;lt;div&amp;gt;\r\n      &amp;lt;FSwitch onChange={() =&amp;gt; setValue(!value)} size=&amp;#39;medium&amp;#39; value={value}&amp;gt;&amp;lt;/FSwitch&amp;gt;&amp;nbsp;\r\n      &amp;lt;FSwitch onChange={() =&amp;gt; setValue(!value)} size=&amp;#39;small&amp;#39; value={value}&amp;gt;&amp;lt;/FSwitch&amp;gt;&amp;nbsp;\r\n      &amp;lt;FSwitch onChange={() =&amp;gt; setValue(!value)} size=&amp;#39;large&amp;#39; value={value}&amp;gt;&amp;lt;/FSwitch&amp;gt;\r\n    &amp;lt;/div&amp;gt;\r\n  )\r\n}" view={<Component43/>}/><br/><DemoItem title="自定义颜色" value="export const ColorTest = function () {\r\n  const [value, setValue] = useState(true)\r\n  const colors = { &amp;#39;--switch-on-color&amp;#39;: &amp;quot;#13ce66&amp;quot;, &amp;quot;--switch-off-color&amp;quot;: &amp;quot;#ff4949&amp;quot; }\r\n  return (\r\n    &amp;lt;div&amp;gt;\r\n      &amp;lt;FSwitch onChange={() =&amp;gt; setValue(!value)} size=&amp;#39;medium&amp;#39; value={value} style={colors}&amp;gt;&amp;lt;/FSwitch&amp;gt;&amp;nbsp;\r\n      &amp;lt;FSwitch onChange={() =&amp;gt; setValue(!value)} size=&amp;#39;small&amp;#39; value={value}&amp;gt;&amp;lt;/FSwitch&amp;gt;&amp;nbsp;\r\n    &amp;lt;/div&amp;gt;\r\n  )\r\n}" view={<Component44/>}/><br/><DemoItem title="自定义宽高" value="export const WidthTest = function () {\r\n  const [value, setValue] = useState(true)\r\n  return (\r\n    &amp;lt;div&amp;gt;\r\n      &amp;lt;FSwitch onChange={() =&amp;gt; setValue(!value)} size=&amp;#39;medium&amp;#39; value={value} width={100} height={50} activeText=&amp;#39;Openhhhhh&amp;#39; inactiveText=&amp;#39;Close&amp;#39; inline&amp;gt;&amp;lt;/FSwitch&amp;gt;&amp;nbsp;\r\n      &amp;lt;FSwitch onChange={() =&amp;gt; setValue(!value)} size=&amp;#39;small&amp;#39; value={value}&amp;gt;&amp;lt;/FSwitch&amp;gt;&amp;nbsp;\r\n    &amp;lt;/div&amp;gt;\r\n  )\r\n}" view={<Component45/>}/><br/><DemoItem title="文本描述" value="export const TextTest = function () {\r\n  const [value, setValue] = useState(true)\r\n\r\n  setTimeout(() =&amp;gt; {\r\n    setValue(false)\r\n    // console.log(&amp;quot;定时器change：&amp;quot;, value);\r\n\r\n  }, 3000)\r\n  return (\r\n    &amp;lt;div&amp;gt;\r\n      &amp;lt;FSwitch onChange={() =&amp;gt; setValue(!value)} size=&amp;#39;medium&amp;#39; value={value} activeText=&amp;#39;Open&amp;#39; inactiveText=&amp;#39;Close&amp;#39;&amp;gt;&amp;lt;/FSwitch&amp;gt;&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;\r\n      &amp;lt;FSwitch onChange={() =&amp;gt; setValue(!value)} size=&amp;#39;medium&amp;#39; value={value} activeText=&amp;#39;Openhhhhh&amp;#39; inactiveText=&amp;#39;Close&amp;#39; inline&amp;gt;&amp;lt;/FSwitch&amp;gt;&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;\r\n      &amp;lt;FSwitch onChange={() =&amp;gt; setValue(!value)} size=&amp;#39;small&amp;#39; value={value} width={50} activeText=&amp;#39;Openhhhhhhhhhhh&amp;#39; inactiveText=&amp;#39;Close&amp;#39; inline&amp;gt;&amp;lt;/FSwitch&amp;gt;&amp;lt;br /&amp;gt;\r\n    &amp;lt;/div&amp;gt;\r\n  )\r\n}" view={<Component46/>}/><br/><DemoItem title="扩展的value类型" value="export const ValueTest = function () {\r\n  const [value1, setValue1] = useState&amp;lt;SwitchValue&amp;gt;(true)\r\n  const [value2, setValue2] = useState&amp;lt;SwitchValue&amp;gt;(100)\r\n  const [value3, setValue3] = useState&amp;lt;SwitchValue&amp;gt;(&amp;#39;Yes&amp;#39;)\r\n\r\n  return (\r\n\r\n    &amp;lt;div&amp;gt;\r\n      &amp;lt;div&amp;gt;\r\n        &amp;lt;span&amp;gt;value1:{value1.toString()}&amp;lt;/span&amp;gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;FSwitch onChange={(value) =&amp;gt; setValue1(value)} size=&amp;#39;medium&amp;#39; value={value1} &amp;gt;&amp;lt;/FSwitch&amp;gt;\r\n      &amp;lt;/div&amp;gt;\r\n      &amp;lt;div&amp;gt;\r\n        &amp;lt;span&amp;gt;value2:{value2}&amp;lt;/span&amp;gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;FSwitch onChange={(value) =&amp;gt; setValue2(value)} size=&amp;#39;medium&amp;#39; value={value2} activeValue={100} inactiveValue={999}&amp;gt;&amp;lt;/FSwitch&amp;gt;\r\n      &amp;lt;/div&amp;gt;\r\n      &amp;lt;div&amp;gt;\r\n        &amp;lt;span&amp;gt;value3:{value3}&amp;lt;/span&amp;gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;FSwitch onChange={(value) =&amp;gt; setValue3(value)} size=&amp;#39;small&amp;#39; value={value3} activeText=&amp;#39;Yes&amp;#39; inactiveText=&amp;#39;No&amp;#39; activeValue=&amp;#39;Yes&amp;#39; inactiveValue=&amp;#39;No&amp;#39;&amp;gt;&amp;lt;/FSwitch&amp;gt;\r\n      &amp;lt;/div&amp;gt;\r\n    &amp;lt;/div&amp;gt;\r\n  )\r\n}" view={<Component47/>}/><br/><DemoItem title="禁用" value="export const DisabledTest = function () {\r\n  const [value1, setValue1] = useState(true)\r\n\r\n  return (\r\n    &amp;lt;FSwitch onChange={(value) =&amp;gt; setValue1(value as boolean)} value={value1} disabled&amp;gt;&amp;lt;/FSwitch&amp;gt;\r\n  )\r\n}" view={<Component48/>}/><br/><DemoItem title="阻止切换-待完善" value="export const BeforeChangeTest = function () {\r\n  const [value1, setValue1] = useState&amp;lt;SwitchValue&amp;gt;(true)\r\n\r\n  return (\r\n    &amp;lt;div&amp;gt;\r\n      &amp;lt;h5&amp;gt;直接传false&amp;lt;/h5&amp;gt;\r\n      &amp;lt;FSwitch onChange={(value) =&amp;gt; setValue1(value)} value={value1} beforeChange={false}&amp;gt;&amp;lt;/FSwitch&amp;gt;\r\n      &amp;lt;h5&amp;gt;期约被拒绝&amp;lt;/h5&amp;gt;\r\n      &amp;lt;FSwitch onChange={(value) =&amp;gt; setValue1(value)} value={value1} beforeChange={() =&amp;gt; Promise.reject()}&amp;gt;&amp;lt;/FSwitch&amp;gt;\r\n      &amp;lt;h5&amp;gt;期约返回值为true&amp;lt;/h5&amp;gt;\r\n      &amp;lt;FSwitch onChange={(value) =&amp;gt; setValue1(value)} value={value1} beforeChange={() =&amp;gt; Promise.resolve(true)}&amp;gt;&amp;lt;/FSwitch&amp;gt;\r\n      &amp;lt;h5&amp;gt;期约返回值为false&amp;lt;/h5&amp;gt;\r\n      &amp;lt;FSwitch onChange={(value) =&amp;gt; setValue1(value)} value={value1} beforeChange={() =&amp;gt; Promise.resolve(false)}&amp;gt;&amp;lt;/FSwitch&amp;gt;\r\n    &amp;lt;/div&amp;gt;\r\n  )\r\n}" view={<Component49/>}/><br/><DemoItem title="加载状态" value="export const LoadingTest = function () {\r\n  const [value1, setValue1] = useState&amp;lt;SwitchValue&amp;gt;(true)\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  return (\r\n    &amp;lt;div&amp;gt;\r\n      &amp;lt;FSwitch onChange={(value) =&amp;gt; {\r\n        setLoading(true)\r\n        setTimeout(() =&amp;gt; {\r\n          setValue1(value)\r\n          setLoading(false)\r\n        }, 3000)\r\n      }} value={value1} loading={loading}&amp;gt;&amp;lt;/FSwitch&amp;gt;\r\n\r\n    &amp;lt;/div&amp;gt;\r\n  )\r\n}" view={<Component50/>}/></div></>},{label: '选项卡（FTab）', path: '/tab', element: <><h1>选项卡（FTab）</h1><div><DemoItem title="基础使用" value="export const FTabTest1 = function () {\r\n      const [val, setVal] = useState&amp;lt;FTabOptionValue&amp;gt;(&amp;#39;2&amp;#39;)\r\n      return (&amp;lt;div&amp;gt;\r\n            &amp;lt;FTab value={val} onChange={(v) =&amp;gt; {\r\n                  setVal(v)\r\n            }} options={[\r\n                  {\r\n                        value: &amp;#39;1&amp;#39;,\r\n                        label: &amp;#39;选项----卡1&amp;#39;\r\n                  }, {\r\n                        value: &amp;#39;2&amp;#39;,\r\n                        label: &amp;#39;选项卡2&amp;#39;\r\n                  }, {\r\n                        value: &amp;#39;3&amp;#39;,\r\n                        label: &amp;#39;选项卡3&amp;#39;\r\n                  },\r\n            ]} /&amp;gt;\r\n      &amp;lt;/div&amp;gt;)\r\n}" view={<Component51/>}/><br/><DemoItem title="过长时滚动" value="export const FTabTest2 = function () {\r\n      const [val, setVal] = useState&amp;lt;FTabOptionValue&amp;gt;(&amp;#39;2&amp;#39;)\r\n      return (&amp;lt;div style={{width:400}}&amp;gt;\r\n            &amp;lt;FTab value={val} onChange={(v) =&amp;gt; {\r\n                  setVal(v)\r\n            }} options={[\r\n                  {\r\n                        value: &amp;#39;1&amp;#39;,\r\n                        label: &amp;#39;选项----卡1&amp;#39;\r\n                  }, {\r\n                        value: &amp;#39;2&amp;#39;,\r\n                        label: &amp;#39;选项卡2&amp;#39;\r\n                  }, {\r\n                        value: &amp;#39;3&amp;#39;,\r\n                        label: &amp;#39;选项卡3&amp;#39;\r\n                  },{\r\n                        value: &amp;#39;4&amp;#39;,\r\n                        label: &amp;#39;选项----卡4&amp;#39;\r\n                  }, {\r\n                        value: &amp;#39;5&amp;#39;,\r\n                        label: &amp;#39;选项卡5&amp;#39;\r\n                  }, {\r\n                        value: &amp;#39;6&amp;#39;,\r\n                        label: &amp;#39;选项卡6&amp;#39;\r\n                  },{\r\n                        value: &amp;#39;7&amp;#39;,\r\n                        label: &amp;#39;选项----卡7&amp;#39;\r\n                  }, {\r\n                        value: &amp;#39;8&amp;#39;,\r\n                        label: &amp;#39;选项卡8&amp;#39;\r\n                  }, {\r\n                        value: &amp;#39;9&amp;#39;,\r\n                        label: &amp;#39;选项卡9&amp;#39;\r\n                  }\r\n            ]} /&amp;gt;\r\n      &amp;lt;/div&amp;gt;)\r\n}" view={<Component52/>}/></div></>},{label: '表格（FTable）', path: '/table', element: <><h1>表格（FTable）</h1><div><DemoItem title="单选" value="export const FTableTest1 = function () {\r\n      return (&amp;lt;FTable rowDiv=&amp;quot;solid&amp;quot; select=&amp;quot;single&amp;quot; border=&amp;quot;solid&amp;quot; columns={columns} data={data} /&amp;gt;)\r\n}" view={<Component53/>}/><br/><DemoItem title="多选" value="export const FTableTest2 = function () {\r\n      return (&amp;lt;FTable rowDiv=&amp;quot;solid&amp;quot; select=&amp;quot;multiple&amp;quot; border=&amp;quot;solid&amp;quot; columns={columns} data={data} /&amp;gt;)\r\n}" view={<Component54/>}/><br/><DemoItem title="限制多选" value="export const FTableTest3 = function () {\r\n      return (&amp;lt;FTable selectLimit={4} rowDiv=&amp;quot;solid&amp;quot; select=&amp;quot;multiple&amp;quot; border=&amp;quot;solid&amp;quot; columns={columns} data={data} /&amp;gt;)\r\n}" view={<Component55/>}/><br/><DemoItem title="禁用特定行" value="export const FTableTest4 = function () {\r\n      return (&amp;lt;FTable disableRow={(row) =&amp;gt; {\r\n            return row.id &amp;lt; 5 &amp;&amp; row.id &amp;gt; 2\r\n      }} rowDiv=&amp;quot;solid&amp;quot; select=&amp;quot;multiple&amp;quot; border=&amp;quot;solid&amp;quot; columns={columns} data={data} /&amp;gt;)\r\n}" view={<Component56/>}/><br/><DemoItem title="滚动" value="export const FTableTest5 = function () {\r\n      return (&amp;lt;FTable style={{\r\n            maxHeight: 200\r\n      }} disableRow={(row) =&amp;gt; {\r\n            return row.id &amp;lt; 5 &amp;&amp; row.id &amp;gt; 2\r\n      }} rowDiv=&amp;quot;solid&amp;quot; select=&amp;quot;multiple&amp;quot; border=&amp;quot;solid&amp;quot; columns={columns} data={data} /&amp;gt;)\r\n}" view={<Component57/>}/></div></>},{label: '标签（FTag）', path: '/tag', element: <><h1>标签（FTag）</h1><div><DemoItem title="undefined" value="export const FTagTest = function () {\r\n      return (&amp;lt;&amp;gt;FTag&amp;lt;/&amp;gt;)\r\n}" view={<Component58/>}/></div></>},{label: '提示信息（FToast）', path: '/toast', element: <><h1>提示信息（FToast）</h1><div><DemoItem title="组件使用" value="export const FToastTest = function () {\r\n    return &amp;lt;&amp;gt;\r\n        &amp;lt;FToast type=&amp;quot;warn&amp;quot; message={&amp;quot;这是一则警告提示&amp;quot;} /&amp;gt;\r\n        &amp;lt;FToast type=&amp;quot;error&amp;quot; message={&amp;quot;这是一则错误提示&amp;quot;} /&amp;gt;\r\n        &amp;lt;FToast type=&amp;quot;fail&amp;quot; message={&amp;quot;这是一则失败提示&amp;quot;} /&amp;gt;\r\n        &amp;lt;FToast type=&amp;quot;success&amp;quot; message={&amp;quot;这是一则成功提示&amp;quot;} /&amp;gt;\r\n    &amp;lt;/&amp;gt;\r\n}" view={<Component59/>}/><br/><DemoItem title="关闭和显示" value="export const CloseTest = function () {\r\n\r\n    let status = 1\r\n    const [isDead, setIsDead] = useState(false)\r\n    const [isShow, setIsShow] = useState(true)\r\n    const close = () =&amp;gt; {\r\n        if (status) {\r\n            setIsDead(true)\r\n            status = 0\r\n        } else {\r\n            setIsDead(false)\r\n            setIsShow(true)\r\n            status = 1\r\n        }\r\n    }\r\n    const destroy = () =&amp;gt; {\r\n        setIsShow(false)\r\n    }\r\n    return (&amp;lt;div style={{ height: 50, position: &amp;#39;relative&amp;#39; }}&amp;gt;\r\n        &amp;lt;FButton loading={isDead &amp;&amp; isShow} variant=&amp;quot;dashed&amp;quot; type={isShow ? &amp;#39;default&amp;#39; : &amp;#39;primary&amp;#39;} onClick={close}&amp;gt;\r\n            {isShow ? &amp;#39;关闭&amp;#39; : &amp;#39;显示&amp;#39;}\r\n        &amp;lt;/FButton&amp;gt;\r\n        {\r\n            isShow ? (\r\n                &amp;lt;div style={{ position: &amp;#39;absolute&amp;#39;, top: 0, left: 120 }}&amp;gt;\r\n                    &amp;lt;FToast message={&amp;quot;点击左边按钮关闭提示&amp;quot;} dead={isDead} destroy={destroy} /&amp;gt;\r\n                &amp;lt;/div&amp;gt;\r\n            ) : null\r\n        }\r\n    &amp;lt;/div&amp;gt;)\r\n}" view={<Component60/>}/><br/><DemoItem title="Api调用" value="export const ApiTest = function () {\r\n    const showToast = (type: FToastType, duration?: number) =&amp;gt; {        \r\n        toast(type, {\r\n            type,\r\n            duration\r\n        })\r\n    }\r\n    return (\r\n        &amp;lt;&amp;gt;\r\n            &amp;lt;div style={{ display: &amp;#39;flex&amp;#39;, flexWrap: &amp;#39;wrap&amp;#39;, gap: 10 }}&amp;gt;\r\n                {[&amp;#39;info&amp;#39;, &amp;#39;success&amp;#39;, &amp;#39;fail&amp;#39;, &amp;#39;error&amp;#39;, &amp;#39;warn&amp;#39;].map(type =&amp;gt; (\r\n                    &amp;lt;FButton\r\n                        variant=&amp;#39;dashed&amp;#39;\r\n                        type=&amp;quot;primary&amp;quot;\r\n                        key={type}\r\n                        onClick={() =&amp;gt; {\r\n                            showToast(type as FToastType)\r\n                        }}\r\n                    &amp;gt;\r\n                        {type}\r\n                    &amp;lt;/FButton&amp;gt;\r\n                ))}\r\n                {[1000, 2000, 3000].map(dur =&amp;gt; (\r\n                    &amp;lt;FButton\r\n                        variant=&amp;#39;dashed&amp;#39;\r\n                        type=&amp;quot;primary&amp;quot;\r\n                        key={dur}\r\n                        onClick={showToast.bind(null, &amp;#39;info&amp;#39;, dur)}\r\n                    &amp;gt;\r\n                        停留{dur}毫秒\r\n                    &amp;lt;/FButton&amp;gt;\r\n                ))}\r\n            &amp;lt;/div&amp;gt;\r\n        &amp;lt;/&amp;gt;\r\n    )\r\n}" view={<Component61/>}/><br/><DemoItem title="Api快捷调用" value="export const QuickTest = function () {\r\n    const handleSuccess = () =&amp;gt; toast.success(&amp;#39;成功&amp;#39;)\r\n    const handleError = () =&amp;gt; toast.error(&amp;#39;错误&amp;#39;)\r\n    const handleWarn = () =&amp;gt; toast.warn(&amp;#39;警告&amp;#39;)\r\n    const handleFail = () =&amp;gt; toast.fail(&amp;#39;失败&amp;#39;)\r\n    return (\r\n        &amp;lt;&amp;gt;\r\n            &amp;lt;div style={{ display: &amp;#39;flex&amp;#39;, flexWrap: &amp;#39;wrap&amp;#39;, gap: 10 }}&amp;gt;\r\n                &amp;lt;FButton type=&amp;quot;safe&amp;quot; variant=&amp;quot;outline&amp;quot; onClick={handleSuccess}&amp;gt;toast.success&amp;lt;/FButton&amp;gt;\r\n                &amp;lt;FButton type=&amp;quot;danger&amp;quot; variant=&amp;quot;text&amp;quot; onClick={handleError}&amp;gt;toast.error&amp;lt;/FButton&amp;gt;\r\n                &amp;lt;FButton type=&amp;quot;danger&amp;quot; variant=&amp;quot;outline&amp;quot; onClick={handleFail}&amp;gt;toast.fail&amp;lt;/FButton&amp;gt;\r\n                &amp;lt;FButton type=&amp;quot;warn&amp;quot; variant=&amp;quot;text&amp;quot; onClick={handleWarn}&amp;gt;toast.warn&amp;lt;/FButton&amp;gt;\r\n            &amp;lt;/div&amp;gt;\r\n        &amp;lt;/&amp;gt;\r\n    )\r\n}" view={<Component62/>}/></div></>}]